{"ast":null,"code":"var _jsxFileName = \"/Users/matheuspina/Desktop/briefy-new/src/components/GlobalPromptsConfig.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { globalPrompts } from '../lib/supabase';\nimport { invalidatePromptsCache } from '../services/geminiService';\nimport { Save, RotateCcw, FileText, GitBranch, CheckSquare } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultPrompts = {\n  pr: {\n    title: 'Prompt para Documento Técnico (PR)',\n    content: `Você é um especialista em análise de requisitos e criação de documentos técnicos.\nCom base nos documentos fornecidos, gere um DOCUMENTO TÉCNICO DETALHADO (PR) incluindo:\n- Visão geral do projeto\n- Objetivos e metas\n- Arquitetura proposta\n- Tecnologias e ferramentas\n- Estimativa de esforço\n- Riscos identificados\n- Prazos estimados\n- Orçamento aproximado\n\nRetorne apenas o texto do documento técnico, sem formatação JSON.`\n  },\n  flowchart: {\n    title: 'Prompt para Fluxograma',\n    content: `Você é um especialista em modelagem de processos e criação de fluxogramas.\nCom base nos documentos fornecidos, gere um FLUXOGRAMA em formato JSON válido.\nO fluxograma deve representar o fluxo completo do projeto/processo.\n\nIMPORTANTE: Retorne APENAS um JSON válido com esta estrutura:\n{\n  \"nodes\": [\n    {\n      \"id\": \"string\",\n      \"type\": \"input|process|output|decision\",\n      \"label\": \"string\",\n      \"position\": {\"x\": number, \"y\": number}\n    }\n  ],\n  \"edges\": [\n    {\n      \"id\": \"string\",\n      \"source\": \"string\",\n      \"target\": \"string\",\n      \"label\": \"string (opcional)\"\n    }\n  ]\n}`\n  },\n  tasks: {\n    title: 'Prompt para Tasks e Épicos',\n    content: `Você é um especialista em gerenciamento de projetos e criação de tarefas.\nCom base nos documentos fornecidos, gere um conjunto completo de TASKS organizadas por ÉPICOS.\n\nIMPORTANTE: Retorne APENAS um JSON válido com esta estrutura:\n{\n  \"epics\": [\n    {\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"priority\": \"low|medium|high\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"story_points\": number (1, 2, 3, 5, 8, 13),\n      \"category\": \"frontend|backend|design|testing|devops|database|security|documentation\",\n      \"epic_index\": number (índice do épico relacionado, começando em 0),\n      \"acceptance_criteria\": [\"string1\", \"string2\"],\n      \"priority\": \"low|medium|high\"\n    }\n  ]\n}`\n  }\n};\nexport const GlobalPromptsConfig = () => {\n  _s();\n  const [prompts, setPrompts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Carregar prompts do banco de dados\n  useEffect(() => {\n    loadPrompts();\n  }, []);\n  const loadPrompts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Carregar prompts usando as funções do supabase\n      const {\n        data,\n        error\n      } = await globalPrompts.list();\n      if (error && error.message.includes('relation \"global_prompts\" does not exist')) {\n        // Usar prompts padrão se a tabela não existir\n        const defaultPromptsArray = Object.entries(defaultPrompts).map(([type, prompt], index) => ({\n          id: `default-${type}`,\n          type: type,\n          title: prompt.title,\n          content: prompt.content,\n          is_default: true,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }));\n        setPrompts(defaultPromptsArray);\n      } else if (error) {\n        setError('Erro ao carregar prompts: ' + error.message);\n      } else {\n        setPrompts(data || []);\n      }\n    } catch (err) {\n      setError('Erro ao carregar prompts: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSavePrompt = async (type, content) => {\n    try {\n      setSaving(type);\n      setError(null);\n      const existingPrompt = prompts.find(p => p.type === type && !p.is_default);\n      if (existingPrompt) {\n        // Atualizar prompt existente\n        console.log('Atualizando prompt existente:', existingPrompt.id);\n        const {\n          error\n        } = await globalPrompts.update(existingPrompt.id, {\n          content\n        });\n        if (error) throw error;\n      } else {\n        // Criar novo prompt\n        console.log('Criando novo prompt para tipo:', type);\n        const {\n          error\n        } = await globalPrompts.create({\n          type,\n          title: defaultPrompts[type].title,\n          content,\n          is_default: false\n        });\n        if (error) throw error;\n      }\n\n      // Invalidar cache e recarregar prompts\n      invalidatePromptsCache();\n      await loadPrompts();\n      console.log('Prompt salvo com sucesso para tipo:', type);\n    } catch (err) {\n      console.error('Erro ao salvar prompt:', err);\n      setError('Erro ao salvar prompt: ' + err.message);\n    } finally {\n      setSaving(null);\n    }\n  };\n  const handleResetPrompt = async type => {\n    try {\n      setError(null);\n      const defaultContent = defaultPrompts[type].content;\n      await handleSavePrompt(type, defaultContent);\n    } catch (err) {\n      setError('Erro ao resetar prompt: ' + err.message);\n    }\n  };\n  const getPromptIcon = type => {\n    switch (type) {\n      case 'pr':\n        return /*#__PURE__*/_jsxDEV(FileText, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 16\n        }, this);\n      case 'flowchart':\n        return /*#__PURE__*/_jsxDEV(GitBranch, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 16\n        }, this);\n      case 'tasks':\n        return /*#__PURE__*/_jsxDEV(CheckSquare, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(FileText, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const getPromptColor = type => {\n    switch (type) {\n      case 'pr':\n        return 'text-blue-600 bg-blue-50 border-blue-200';\n      case 'flowchart':\n        return 'text-purple-600 bg-purple-50 border-purple-200';\n      case 'tasks':\n        return 'text-green-600 bg-green-50 border-green-200';\n      default:\n        return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-3 text-gray-600\",\n        children: \"Carregando prompts...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold text-gray-900 mb-2\",\n        children: \"Prompts Globais\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Configure os prompts que ser\\xE3o usados para gerar documentos t\\xE9cnicos, fluxogramas e tasks. Cada prompt ser\\xE1 combinado com o conte\\xFAdo dos documentos enviados.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-50 border border-red-200 rounded-md p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-800\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: Object.entries(defaultPrompts).map(([type, defaultPrompt]) => {\n        const currentPrompt = prompts.find(p => p.type === type);\n        const isModified = currentPrompt && currentPrompt.content !== defaultPrompt.content;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border rounded-lg p-6 ${getPromptColor(type)}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-3\",\n              children: [getPromptIcon(type), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-medium text-gray-900\",\n                  children: defaultPrompt.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-600\",\n                  children: [\"Tipo: \", type.toUpperCase(), isModified && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"ml-2 text-orange-600\",\n                    children: \"(Modificado)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 38\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex space-x-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleResetPrompt(type),\n                className: \"px-3 py-1 text-sm text-gray-600 hover:text-gray-800 border border-gray-300 rounded-md hover:bg-gray-50\",\n                disabled: saving === type,\n                children: [/*#__PURE__*/_jsxDEV(RotateCcw, {\n                  className: \"w-4 h-4 inline mr-1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 21\n                }, this), \"Resetar\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  // Buscar o conteúdo atual do textarea\n                  const textarea = document.querySelector(`textarea[data-prompt-type=\"${type}\"]`);\n                  const content = textarea ? textarea.value : (currentPrompt === null || currentPrompt === void 0 ? void 0 : currentPrompt.content) || defaultPrompt.content;\n                  handleSavePrompt(type, content);\n                },\n                className: \"px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\",\n                disabled: saving === type,\n                children: saving === type ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Save, {\n                    className: \"w-4 h-4 inline mr-1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 261,\n                    columnNumber: 25\n                  }, this), \"Salvar\"]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium text-gray-700 mb-2\",\n              children: \"Prompt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              \"data-prompt-type\": type,\n              value: (currentPrompt === null || currentPrompt === void 0 ? void 0 : currentPrompt.content) || defaultPrompt.content,\n              onChange: e => {\n                const updatedPrompts = prompts.map(p => p.type === type ? {\n                  ...p,\n                  content: e.target.value\n                } : p);\n                // Não criar prompt temporário - deixar a lógica de salvar lidar com isso\n                setPrompts(updatedPrompts);\n              },\n              className: \"w-full h-64 p-4 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 font-mono text-sm\",\n              placeholder: \"Digite o prompt personalizado...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this)]\n        }, type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-50 border border-blue-200 rounded-md p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-medium text-blue-900 mb-2\",\n        children: \"\\uD83D\\uDCA1 Dicas para Prompts Eficazes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"text-sm text-blue-800 space-y-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2022 Seja espec\\xEDfico sobre o formato de sa\\xEDda esperado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2022 Inclua exemplos quando necess\\xE1rio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2022 Use placeholders para conte\\xFAdo din\\xE2mico\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2022 Defina claramente o escopo e limita\\xE7\\xF5es\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2022 Teste os prompts com diferentes tipos de documentos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalPromptsConfig, \"q9HFUSZS4WYU5ODYpDrTLHejjIk=\");\n_c = GlobalPromptsConfig;\nvar _c;\n$RefreshReg$(_c, \"GlobalPromptsConfig\");","map":{"version":3,"names":["React","useState","useEffect","globalPrompts","invalidatePromptsCache","Save","RotateCcw","FileText","GitBranch","CheckSquare","jsxDEV","_jsxDEV","Fragment","_Fragment","defaultPrompts","pr","title","content","flowchart","tasks","GlobalPromptsConfig","_s","prompts","setPrompts","loading","setLoading","saving","setSaving","error","setError","loadPrompts","data","list","message","includes","defaultPromptsArray","Object","entries","map","type","prompt","index","id","is_default","created_at","Date","toISOString","updated_at","err","handleSavePrompt","existingPrompt","find","p","console","log","update","create","handleResetPrompt","defaultContent","getPromptIcon","className","fileName","_jsxFileName","lineNumber","columnNumber","getPromptColor","children","defaultPrompt","currentPrompt","isModified","toUpperCase","onClick","disabled","textarea","document","querySelector","value","onChange","e","updatedPrompts","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/matheuspina/Desktop/briefy-new/src/components/GlobalPromptsConfig.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase, globalPrompts, GlobalPrompt } from '../lib/supabase';\nimport { invalidatePromptsCache } from '../services/geminiService';\nimport { Save, RotateCcw, FileText, GitBranch, CheckSquare } from 'lucide-react';\n\n\n\nconst defaultPrompts = {\n  pr: {\n    title: 'Prompt para Documento Técnico (PR)',\n    content: `Você é um especialista em análise de requisitos e criação de documentos técnicos.\nCom base nos documentos fornecidos, gere um DOCUMENTO TÉCNICO DETALHADO (PR) incluindo:\n- Visão geral do projeto\n- Objetivos e metas\n- Arquitetura proposta\n- Tecnologias e ferramentas\n- Estimativa de esforço\n- Riscos identificados\n- Prazos estimados\n- Orçamento aproximado\n\nRetorne apenas o texto do documento técnico, sem formatação JSON.`\n  },\n  flowchart: {\n    title: 'Prompt para Fluxograma',\n    content: `Você é um especialista em modelagem de processos e criação de fluxogramas.\nCom base nos documentos fornecidos, gere um FLUXOGRAMA em formato JSON válido.\nO fluxograma deve representar o fluxo completo do projeto/processo.\n\nIMPORTANTE: Retorne APENAS um JSON válido com esta estrutura:\n{\n  \"nodes\": [\n    {\n      \"id\": \"string\",\n      \"type\": \"input|process|output|decision\",\n      \"label\": \"string\",\n      \"position\": {\"x\": number, \"y\": number}\n    }\n  ],\n  \"edges\": [\n    {\n      \"id\": \"string\",\n      \"source\": \"string\",\n      \"target\": \"string\",\n      \"label\": \"string (opcional)\"\n    }\n  ]\n}`\n  },\n  tasks: {\n    title: 'Prompt para Tasks e Épicos',\n    content: `Você é um especialista em gerenciamento de projetos e criação de tarefas.\nCom base nos documentos fornecidos, gere um conjunto completo de TASKS organizadas por ÉPICOS.\n\nIMPORTANTE: Retorne APENAS um JSON válido com esta estrutura:\n{\n  \"epics\": [\n    {\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"priority\": \"low|medium|high\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"story_points\": number (1, 2, 3, 5, 8, 13),\n      \"category\": \"frontend|backend|design|testing|devops|database|security|documentation\",\n      \"epic_index\": number (índice do épico relacionado, começando em 0),\n      \"acceptance_criteria\": [\"string1\", \"string2\"],\n      \"priority\": \"low|medium|high\"\n    }\n  ]\n}`\n  }\n};\n\nexport const GlobalPromptsConfig: React.FC = () => {\n  const [prompts, setPrompts] = useState<GlobalPrompt[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Carregar prompts do banco de dados\n  useEffect(() => {\n    loadPrompts();\n  }, []);\n\n  const loadPrompts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Carregar prompts usando as funções do supabase\n      const { data, error } = await globalPrompts.list();\n\n      if (error && error.message.includes('relation \"global_prompts\" does not exist')) {\n        // Usar prompts padrão se a tabela não existir\n        const defaultPromptsArray = Object.entries(defaultPrompts).map(([type, prompt], index) => ({\n          id: `default-${type}`,\n          type: type as 'pr' | 'flowchart' | 'tasks',\n          title: prompt.title,\n          content: prompt.content,\n          is_default: true,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }));\n        setPrompts(defaultPromptsArray);\n      } else if (error) {\n        setError('Erro ao carregar prompts: ' + error.message);\n      } else {\n        setPrompts(data || []);\n      }\n    } catch (err: any) {\n      setError('Erro ao carregar prompts: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSavePrompt = async (type: 'pr' | 'flowchart' | 'tasks', content: string) => {\n    try {\n      setSaving(type);\n      setError(null);\n\n      const existingPrompt = prompts.find(p => p.type === type && !p.is_default);\n\n      if (existingPrompt) {\n        // Atualizar prompt existente\n        console.log('Atualizando prompt existente:', existingPrompt.id);\n        const { error } = await globalPrompts.update(existingPrompt.id, { content });\n        if (error) throw error;\n      } else {\n        // Criar novo prompt\n        console.log('Criando novo prompt para tipo:', type);\n        const { error } = await globalPrompts.create({\n          type,\n          title: defaultPrompts[type].title,\n          content,\n          is_default: false\n        });\n        if (error) throw error;\n      }\n\n      // Invalidar cache e recarregar prompts\n      invalidatePromptsCache();\n      await loadPrompts();\n\n      console.log('Prompt salvo com sucesso para tipo:', type);\n    } catch (err: any) {\n      console.error('Erro ao salvar prompt:', err);\n      setError('Erro ao salvar prompt: ' + err.message);\n    } finally {\n      setSaving(null);\n    }\n  };\n\n  const handleResetPrompt = async (type: 'pr' | 'flowchart' | 'tasks') => {\n    try {\n      setError(null);\n      const defaultContent = defaultPrompts[type].content;\n      await handleSavePrompt(type, defaultContent);\n    } catch (err: any) {\n      setError('Erro ao resetar prompt: ' + err.message);\n    }\n  };\n\n  const getPromptIcon = (type: string) => {\n    switch (type) {\n      case 'pr':\n        return <FileText className=\"w-5 h-5\" />;\n      case 'flowchart':\n        return <GitBranch className=\"w-5 h-5\" />;\n      case 'tasks':\n        return <CheckSquare className=\"w-5 h-5\" />;\n      default:\n        return <FileText className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getPromptColor = (type: string) => {\n    switch (type) {\n      case 'pr':\n        return 'text-blue-600 bg-blue-50 border-blue-200';\n      case 'flowchart':\n        return 'text-purple-600 bg-purple-50 border-purple-200';\n      case 'tasks':\n        return 'text-green-600 bg-green-50 border-green-200';\n      default:\n        return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-3 text-gray-600\">Carregando prompts...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Prompts Globais</h2>\n        <p className=\"text-gray-600\">\n          Configure os prompts que serão usados para gerar documentos técnicos, fluxogramas e tasks.\n          Cada prompt será combinado com o conteúdo dos documentos enviados.\n        </p>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n          <p className=\"text-red-800\">{error}</p>\n        </div>\n      )}\n\n      <div className=\"space-y-6\">\n        {Object.entries(defaultPrompts).map(([type, defaultPrompt]) => {\n          const currentPrompt = prompts.find(p => p.type === type);\n          const isModified = currentPrompt && currentPrompt.content !== defaultPrompt.content;\n\n          return (\n            <div key={type} className={`border rounded-lg p-6 ${getPromptColor(type)}`}>\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  {getPromptIcon(type)}\n                  <div>\n                    <h3 className=\"font-medium text-gray-900\">{defaultPrompt.title}</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Tipo: {type.toUpperCase()}\n                      {isModified && <span className=\"ml-2 text-orange-600\">(Modificado)</span>}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => handleResetPrompt(type as any)}\n                    className=\"px-3 py-1 text-sm text-gray-600 hover:text-gray-800 border border-gray-300 rounded-md hover:bg-gray-50\"\n                    disabled={saving === type}\n                  >\n                    <RotateCcw className=\"w-4 h-4 inline mr-1\" />\n                    Resetar\n                  </button>\n                  <button\n                    onClick={() => {\n                      // Buscar o conteúdo atual do textarea\n                      const textarea = document.querySelector(`textarea[data-prompt-type=\"${type}\"]`) as HTMLTextAreaElement;\n                      const content = textarea ? textarea.value : (currentPrompt?.content || defaultPrompt.content);\n                      handleSavePrompt(type as any, content);\n                    }}\n                    className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\n                    disabled={saving === type}\n                  >\n                    {saving === type ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    ) : (\n                      <>\n                        <Save className=\"w-4 h-4 inline mr-1\" />\n                        Salvar\n                      </>\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Prompt\n                </label>\n                <textarea\n                  data-prompt-type={type}\n                  value={currentPrompt?.content || defaultPrompt.content}\n                  onChange={(e) => {\n                    const updatedPrompts = prompts.map(p =>\n                      p.type === type ? { ...p, content: e.target.value } : p\n                    );\n                    // Não criar prompt temporário - deixar a lógica de salvar lidar com isso\n                    setPrompts(updatedPrompts);\n                  }}\n                  className=\"w-full h-64 p-4 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 font-mono text-sm\"\n                  placeholder=\"Digite o prompt personalizado...\"\n                />\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"bg-blue-50 border border-blue-200 rounded-md p-4\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">💡 Dicas para Prompts Eficazes</h4>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• Seja específico sobre o formato de saída esperado</li>\n          <li>• Inclua exemplos quando necessário</li>\n          <li>• Use placeholders para conteúdo dinâmico</li>\n          <li>• Defina claramente o escopo e limitações</li>\n          <li>• Teste os prompts com diferentes tipos de documentos</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}