{"ast":null,"code":"/**\n * ARQUITETURA DE PROMPTS - IMPORTANTE\n *\n * 1. DEFAULT_PROMPTS (hardcoded): Contém instruções técnicas sobre:\n *    - Como a IA deve se comportar (papel/função)\n *    - Formato de resposta esperado (JSON, texto, etc.)\n *    - Estrutura de dados obrigatória\n *    - Regras de parsing e validação\n *\n * 2. PROMPTS GLOBAIS (banco de dados): Devem conter APENAS:\n *    - Contexto específico do domínio/negócio\n *    - Informações contextuais adicionais\n *    - Preferências específicas do cliente/usuário\n *    - NUNCA instruções técnicas sobre formato de resposta\n *\n *    EXEMPLOS de prompts globais (APENAS contexto):\n *    - \"Este é um sistema de e-commerce para vendas online\"\n *    - \"Cliente trabalha com gestão de clínicas médicas\"\n *    - \"Priorizar segurança e conformidade com LGPD\"\n *    - \"Sistema deve ser compatível com dispositivos móveis\"\n *\n * 3. CONTEÚDO DINÂMICO:\n *    - Conteúdo dos documentos do projeto\n *    - Informações adicionais fornecidas pelo usuário\n *\n * Combinação final: Instruções Técnicas + Contexto Específico + Conteúdo do Projeto\n */\n\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport { supabase } from '../lib/supabase';\nimport { supportMaterials } from '../lib/supabase';\n\n// Configuração da API key do Gemini\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY || '';\nif (!API_KEY) {\n  console.error('❌ REACT_APP_GEMINI_API_KEY não configurada no arquivo .env');\n  console.error('📝 Para configurar: crie um arquivo .env na raiz do projeto com:');\n  console.error('   REACT_APP_GEMINI_API_KEY=sua_api_key_aqui');\n  console.error('🔑 Obtenha sua API key em: https://makersuite.google.com/app/apikey');\n}\nlet genAI;\ntry {\n  genAI = new GoogleGenerativeAI(API_KEY);\n} catch (error) {\n  console.error('❌ Erro ao inicializar GoogleGenerativeAI:', error);\n}\n\n// Prompts padrão (fallback)\nconst DEFAULT_PROMPTS = {\n  pr: `Você é um especialista em análise de requisitos e criação de documentos técnicos.\nCom base nos documentos fornecidos, gere um DOCUMENTO TÉCNICO DETALHADO (PR) incluindo:\n- Visão geral do projeto\n- Objetivos e metas\n- Arquitetura proposta\n- Tecnologias e ferramentas\n- Estimativa de esforço\n- Riscos identificados\n- Prazos estimados\n- Orçamento aproximado\n\nRetorne apenas o texto do documento técnico, sem formatação JSON.`,\n  flowchart: `Você é um especialista em modelagem de processos e criação de fluxogramas técnicos.\nCom base nos documentos fornecidos, gere um FLUXOGRAMA em formato JSON válido que represente o fluxo completo do projeto/processo.\n\n**INSTRUÇÕES IMPORTANTES:**\n\n1. **ANÁLISE DO PROCESSO**: Identifique as etapas principais do processo, pontos de decisão, entradas e saídas.\n\n2. **CRIAÇÃO DE NÓS**:\n   - **input**: Pontos de entrada, início do processo\n   - **process**: Atividades, tarefas, processamento de dados\n   - **output**: Resultados, fim do processo\n   - **decision**: Pontos de decisão com ramificações (sim/não)\n\n3. **POSICIONAMENTO**: Distribua os nós de forma lógica no diagrama:\n   - Fluxo de cima para baixo ou esquerda para direita\n   - Agrupe nós relacionados\n   - Mantenha distância adequada entre nós\n\n4. **CONEXÕES**: Cada edge deve conectar exatamente 2 nós existentes.\n\n**ESTRUTURA OBRIGATÓRIA**: Retorne APENAS um JSON válido (sem texto adicional):\n\n{\n  \"nodes\": [\n    {\n      \"id\": \"string_unico\",\n      \"type\": \"input|process|output|decision\",\n      \"label\": \"Descrição clara e concisa do nó\",\n      \"position\": {\"x\": number, \"y\": number}\n    }\n  ],\n  \"edges\": [\n    {\n      \"id\": \"edge_string_unico\",\n      \"source\": \"id_do_no_origem\",\n      \"target\": \"id_do_no_destino\",\n      \"label\": \"rótulo_opcional_da_conexao\"\n    }\n  ]\n}\n\n**EXEMPLO DE FLUXOGRAMA BEM ESTRUTURADO:**\n\n{\n  \"nodes\": [\n    {\"id\": \"start\", \"type\": \"input\", \"label\": \"Início do Processo\", \"position\": {\"x\": 100, \"y\": 100}},\n    {\"id\": \"login\", \"type\": \"process\", \"label\": \"Processar Login\", \"position\": {\"x\": 300, \"y\": 100}},\n    {\"id\": \"auth_check\", \"type\": \"decision\", \"label\": \"Credenciais Válidas?\", \"position\": {\"x\": 500, \"y\": 100}},\n    {\"id\": \"dashboard\", \"type\": \"process\", \"label\": \"Carregar Dashboard\", \"position\": {\"x\": 300, \"y\": 300}},\n    {\"id\": \"error\", \"type\": \"output\", \"label\": \"Mostrar Erro\", \"position\": {\"x\": 700, \"y\": 100}},\n    {\"id\": \"logout\", \"type\": \"output\", \"label\": \"Logout do Sistema\", \"position\": {\"x\": 500, \"y\": 300}}\n  ],\n  \"edges\": [\n    {\"id\": \"e1\", \"source\": \"start\", \"target\": \"login\"},\n    {\"id\": \"e2\", \"source\": \"login\", \"target\": \"auth_check\"},\n    {\"id\": \"e3\", \"source\": \"auth_check\", \"target\": \"dashboard\", \"label\": \"Sim\"},\n    {\"id\": \"e4\", \"source\": \"auth_check\", \"target\": \"error\", \"label\": \"Não\"},\n    {\"id\": \"e5\", \"source\": \"dashboard\", \"target\": \"logout\"}\n  ]\n}\n\n**REGRAS IMPORTANTES:**\n- Use IDs únicos para todos os nós e edges\n- Todas as conexões devem referenciar IDs existentes\n- Posições devem formar um layout lógico e legível\n- Labels devem ser concisos mas descritivos\n- Certifique-se de que o JSON seja válido e parseável`,\n  tasks: `Você é um especialista em gerenciamento de projetos ágeis e criação de tarefas detalhadas.\nCom base nos documentos fornecidos, analise o projeto e crie uma estrutura completa de ÉPICOS e TASKS seguindo as melhores práticas ágeis.\n\n**INSTRUÇÕES IMPORTANTES:**\n\n1. **ANÁLISE DO PROJETO**: Primeiro, identifique os principais módulos/componentes do sistema e funcionalidades principais.\n\n2. **CRIAÇÃO DE ÉPICOS**: Cada épico deve representar uma funcionalidade ou módulo principal do sistema.\n   - Use nomes descritivos e objetivos\n   - Inclua descrição detalhada do que o épico abrange\n   - Defina prioridade baseada na criticidade para o negócio\n\n3. **CRIAÇÃO DE TASKS**: Para cada épico, crie tasks específicas e mensuráveis.\n   - Cada task deve ter um objetivo claro e específico\n   - Use verbos de ação no título (Implementar, Criar, Configurar, etc.)\n   - Defina story points realistas baseados na complexidade\n   - Categorize corretamente por tipo de trabalho\n   - Inclua critérios de aceite específicos e testáveis\n\n4. **ESTRUTURA OBRIGATÓRIA**: Retorne APENAS um JSON válido com esta estrutura:\n\n{\n  \"epics\": [\n    {\n      \"title\": \"Nome descritivo do épico\",\n      \"description\": \"Descrição detalhada do que este épico abrange, incluindo objetivos e contexto\",\n      \"priority\": \"high|medium|low\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"title\": \"Verbo + Objetivo específico da task\",\n      \"description\": \"Descrição detalhada do que deve ser implementado, incluindo contexto e dependências\",\n      \"story_points\": 1|2|3|5|8|13,\n      \"category\": \"frontend|backend|design|testing|devops|database|security|documentation|infrastructure|mobile|api\",\n      \"epic_index\": 0,\n      \"acceptance_criteria\": [\n        \"Critério específico e testável 1\",\n        \"Critério específico e testável 2\",\n        \"Critério específico e testável 3\"\n      ],\n      \"priority\": \"high|medium|low\",\n      \"estimated_hours\": 2|4|8|16|24|40\n    }\n  ]\n}\n\n**DIRETRIZES PARA STORY POINTS:**\n- 1: Tarefa muito simples, poucos minutos\n- 2: Tarefa simples, até 2 horas\n- 3: Tarefa média, até 4 horas\n- 5: Tarefa complexa, até 8 horas\n- 8: Tarefa muito complexa, até 16 horas\n- 13: Tarefa extremamente complexa, até 24+ horas\n\n**CATEGORIAS DISPONÍVEIS:**\n- frontend: Interface do usuário, componentes React/Vue/Angular\n- backend: APIs, lógica de negócio, serviços\n- design: UI/UX, protótipos, wireframes\n- testing: Testes unitários, integração, e2e\n- devops: CI/CD, infraestrutura, deploy\n- database: Modelagem, migrations, otimização\n- security: Autenticação, autorização, criptografia\n- documentation: Documentação técnica e de usuário\n- infrastructure: Servidores, redes, configuração\n- mobile: Apps mobile, responsividade\n- api: Integrações, webhooks, APIs externas\n\n**EXEMPLO DE TASK BEM ESTRUTURADA:**\n{\n  \"title\": \"Implementar sistema de autenticação OAuth2\",\n  \"description\": \"Criar sistema completo de login usando Google OAuth2, incluindo middleware, validação de tokens e refresh tokens\",\n  \"story_points\": 8,\n  \"category\": \"backend\",\n  \"epic_index\": 0,\n  \"acceptance_criteria\": [\n    \"Usuário pode fazer login com Google\",\n    \"Token JWT é gerado e validado corretamente\",\n    \"Middleware de autenticação protege rotas\",\n    \"Refresh token funciona para renovar sessão\",\n    \"Logout invalida tokens corretamente\"\n  ],\n  \"priority\": \"high\",\n  \"estimated_hours\": 16\n}`\n};\n\n// Cache para prompts globais\nlet cachedPrompts = null;\nlet cacheTimestamp = 0;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutos\n\n// Função para obter prompts globais do banco de dados\n// NOTA: Os prompts globais devem conter APENAS contexto específico do domínio/negócio\n// Instruções técnicas sobre formato de resposta ficam nos DEFAULT_PROMPTS\nexport const getGlobalPrompts = async () => {\n  try {\n    // Verificar cache\n    const now = Date.now();\n    if (cachedPrompts && now - cacheTimestamp < CACHE_DURATION) {\n      return cachedPrompts;\n    }\n\n    // Buscar do banco de dados (apenas prompts ativos)\n    const {\n      data,\n      error\n    } = await supabase.from('global_prompts').select('*').eq('is_active', true);\n    if (error && error.message.includes('relation \"global_prompts\" does not exist')) {\n      // Usar prompts padrão se a tabela não existir\n      cachedPrompts = DEFAULT_PROMPTS;\n      cacheTimestamp = now;\n      return cachedPrompts;\n    } else if (error) {\n      console.error('Erro ao buscar prompts globais:', error);\n      return DEFAULT_PROMPTS;\n    }\n\n    // Converter array para objeto - apenas contexto específico, não instruções técnicas\n    const promptsObject = {\n      ...DEFAULT_PROMPTS\n    };\n    if (data && Array.isArray(data)) {\n      data.forEach(prompt => {\n        if (prompt.type && prompt.content) {\n          // Se o conteúdo for diferente do padrão, assume que é contexto específico\n          if (prompt.content !== DEFAULT_PROMPTS[prompt.type]) {\n            promptsObject[prompt.type] = prompt.content;\n          }\n        }\n      });\n    }\n    cachedPrompts = promptsObject;\n    cacheTimestamp = now;\n    return cachedPrompts;\n  } catch (error) {\n    console.error('Erro ao obter prompts globais:', error);\n    return DEFAULT_PROMPTS;\n  }\n};\n\n// Função para invalidar cache de prompts\nexport const invalidatePromptsCache = () => {\n  cachedPrompts = null;\n  cacheTimestamp = 0;\n};\n\n// Função para gerar prompt específico baseado no tipo\n// Função para buscar materiais de apoio de um projeto\nconst getProjectSupportMaterials = async projectId => {\n  try {\n    console.log('🔍 Buscando materiais de apoio do projeto:', projectId);\n\n    // Primeiro tentar buscar materiais específicos do projeto\n    let {\n      data,\n      error\n    } = await supportMaterials.list(projectId);\n\n    // Se não encontrar materiais específicos, buscar materiais padrão/globais\n    if (!data || data.length === 0) {\n      console.log('⚠️ Nenhum material específico encontrado, buscando materiais padrão...');\n      const {\n        data: defaultData,\n        error: defaultError\n      } = await supabase.from('support_materials').select('*').eq('is_default', true).order('created_at', {\n        ascending: false\n      });\n      if (!defaultError && defaultData && defaultData.length > 0) {\n        console.log('✅ Materiais padrão encontrados:', defaultData.length);\n        data = defaultData;\n      }\n    }\n    if (error) {\n      console.error('❌ Erro ao buscar materiais de apoio:', error);\n      return {};\n    }\n\n    // Organizar por tipo\n    const materialsByType = {};\n    (data || []).forEach(material => {\n      materialsByType[material.type] = material.content;\n      console.log(`📄 Material ${material.type} encontrado:`, material.content.substring(0, 100) + '...');\n      console.log(`📊 Detalhes do material ${material.type}:`, {\n        id: material.id,\n        name: material.name,\n        type: material.type,\n        is_default: material.is_default,\n        content_length: material.content.length\n      });\n    });\n    console.log('✅ Materiais de apoio encontrados:', Object.keys(materialsByType));\n    console.log('📋 Resumo dos materiais por tipo:', Object.keys(materialsByType).map(type => {\n      var _materialsByType$type;\n      return {\n        type,\n        length: ((_materialsByType$type = materialsByType[type]) === null || _materialsByType$type === void 0 ? void 0 : _materialsByType$type.length) || 0\n      };\n    }));\n    return materialsByType;\n  } catch (error) {\n    console.error('❌ Erro ao buscar materiais de apoio:', error);\n    return {};\n  }\n};\nconst generatePrompt = async (type, documentContent, additionalInfo, projectId) => {\n  const globalPrompts = await getGlobalPrompts();\n\n  // Usar instruções técnicas do prompt hardcoded + contexto específico do global\n  const technicalInstructions = DEFAULT_PROMPTS[type];\n  const domainContext = globalPrompts[type];\n\n  // Combinar: instruções técnicas + contexto específico + conteúdo\n  let finalPrompt = technicalInstructions;\n\n  // Adicionar contexto específico se existir e for diferente do padrão\n  if (domainContext && domainContext !== technicalInstructions) {\n    finalPrompt += `\\n\\n--- CONTEXTO ESPECÍFICO DO DOMÍNIO ---\\n${domainContext}`;\n  }\n\n  // Buscar e adicionar materiais de apoio se projectId for fornecido\n  if (projectId) {\n    console.log(`🔍 Buscando materiais de apoio do tipo \"${type}\" para o projeto: ${projectId}`);\n    const supportMaterials = await getProjectSupportMaterials(projectId);\n    const projectMaterial = supportMaterials[type];\n    if (projectMaterial) {\n      finalPrompt += `\\n\\n--- MATERIAL DE APOIO PERSONALIZADO (${type.toUpperCase()}) ---\\n${projectMaterial}`;\n      console.log(`✅ Material de apoio ${type} adicionado ao prompt (${projectMaterial.length} caracteres)`);\n      console.log(`📋 Conteúdo do material ${type}:`, projectMaterial.substring(0, 150) + '...');\n    } else {\n      console.log(`⚠️ Nenhum material de apoio ${type} encontrado para o projeto ${projectId}`);\n      console.log(`📊 Materiais disponíveis:`, Object.keys(supportMaterials));\n    }\n  } else {\n    console.log(`ℹ️ Sem projectId fornecido, usando apenas prompts padrão`);\n  }\n\n  // Adicionar conteúdo dos documentos\n  finalPrompt += `\\n\\n--- CONTEÚDO DOS DOCUMENTOS ---\\n${documentContent}`;\n\n  // Adicionar informações adicionais se fornecidas\n  if (additionalInfo.trim()) {\n    finalPrompt += `\\n\\n--- INFORMAÇÕES ADICIONAIS ---\\n${additionalInfo}`;\n  }\n  return finalPrompt;\n};\nexport const validateApiKey = () => {\n  if (!API_KEY) {\n    console.error('❌ API key do Gemini não configurada');\n    console.error('📝 Configure REACT_APP_GEMINI_API_KEY no arquivo .env');\n    console.error('🔑 Obtenha sua API key em: https://makersuite.google.com/app/apikey');\n    return false;\n  }\n\n  // Verificar se a API key tem formato válido (chaves do Google AI começam com \"AIza\")\n  const isValidFormat = API_KEY.startsWith('AIza');\n  if (!isValidFormat) {\n    console.error('❌ Formato da API key inválido. As chaves do Google AI começam com \"AIza\"');\n    console.error('🔍 Sua chave atual:', API_KEY.substring(0, 10) + '...');\n    return false;\n  }\n  console.log('✅ API key do Gemini configurada corretamente');\n  return true;\n};\n\n// Função para testar conexão com Gemini\nexport const testGeminiConnection = async () => {\n  console.log('🧪 Testando conexão com Gemini...');\n  if (!validateApiKey()) {\n    return false;\n  }\n  try {\n    if (!genAI) {\n      console.error('❌ Falha ao inicializar serviço do Gemini');\n      return false;\n    }\n    const model = genAI.getGenerativeModel({\n      model: 'gemini-2.0-flash-exp'\n    });\n\n    // Teste simples com prompt mínimo\n    const testPrompt = 'Responda apenas com \"OK\" se você recebeu esta mensagem.';\n    const result = await model.generateContent(testPrompt);\n    const response = await result.response;\n    const text = response.text();\n    console.log('✅ Conexão com Gemini funcionando:', text.trim());\n    return true;\n  } catch (error) {\n    console.error('❌ Erro na conexão com Gemini:', error.message);\n    return false;\n  }\n};\n\n// Função de debug para verificar materiais de apoio\nexport const debugSupportMaterials = async projectId => {\n  console.log('🔍 DEBUG: Verificando materiais de apoio...');\n  try {\n    // Verificar materiais específicos do projeto\n    if (projectId) {\n      console.log(`📊 Verificando materiais para projeto: ${projectId}`);\n      const {\n        data: projectMaterials\n      } = await supportMaterials.list(projectId);\n      console.log('📋 Materiais específicos do projeto:', (projectMaterials === null || projectMaterials === void 0 ? void 0 : projectMaterials.length) || 0);\n    }\n\n    // Verificar materiais padrão/globais\n    const {\n      data: defaultMaterials,\n      error\n    } = await supabase.from('support_materials').select('*').eq('is_default', true).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('❌ Erro ao buscar materiais padrão:', error);\n      return;\n    }\n    console.log('📋 Materiais padrão encontrados:', (defaultMaterials === null || defaultMaterials === void 0 ? void 0 : defaultMaterials.length) || 0);\n    if (defaultMaterials && defaultMaterials.length > 0) {\n      defaultMaterials.forEach(material => {\n        console.log(`  - ${material.type}: ${material.name} (${material.content.length} chars)`);\n      });\n    } else {\n      console.log('⚠️ Nenhum material padrão encontrado! Configure na tela de materiais de apoio.');\n    }\n  } catch (error) {\n    console.error('❌ Erro no debug de materiais:', error);\n  }\n};\n\n// Função para processar documentos e gerar conteúdo específico\nexport const generateContent = async (type, documents, additionalInfo, projectId) => {\n  try {\n    // Validação da API key\n    if (!API_KEY) {\n      throw new Error('API key do Gemini não configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');\n    }\n    if (!genAI) {\n      throw new Error('Falha ao inicializar o serviço do Gemini. Verifique se a API key é válida');\n    }\n    const model = genAI.getGenerativeModel({\n      model: 'gemini-2.0-flash-exp'\n    });\n\n    // Preparar o conteúdo dos documentos\n    let documentContent = '';\n    documents.forEach((doc, index) => {\n      documentContent += `\\n--- DOCUMENTO ${index + 1}: ${doc.name} ---\\n`;\n      documentContent += doc.content;\n      documentContent += '\\n';\n    });\n    const prompt = await generatePrompt(type, documentContent, additionalInfo, projectId);\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n\n    // Processar resposta baseado no tipo\n    switch (type) {\n      case 'pr':\n        // Para PR, retorna o texto diretamente\n        return text.trim();\n      case 'flowchart':\n      case 'tasks':\n        // Para flowchart e tasks, tenta extrair JSON\n        try {\n          let jsonText = '';\n\n          // Método 1: Tentar extrair JSON de blocos de código markdown\n          const codeBlockMatch = text.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/);\n          if (codeBlockMatch) {\n            jsonText = codeBlockMatch[1];\n          } else {\n            // Método 2: Procurar por JSON válido na resposta\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n              jsonText = jsonMatch[0];\n            }\n          }\n          if (jsonText) {\n            // Limpar o texto JSON (remover espaços extras, quebras de linha desnecessárias)\n            jsonText = jsonText.trim();\n\n            // Verificar se é um JSON válido antes de parsear\n            try {\n              JSON.parse(jsonText);\n              console.log(`✅ JSON ${type} parseado com sucesso`);\n              return JSON.parse(jsonText);\n            } catch (parseError) {\n              console.error(`❌ JSON ${type} inválido:`, parseError);\n              console.error('Texto que falhou:', jsonText);\n              throw new Error(`JSON ${type} inválido: ${(parseError === null || parseError === void 0 ? void 0 : parseError.message) || 'Erro desconhecido'}`);\n            }\n          } else {\n            console.error('❌ Nenhum JSON encontrado na resposta:', text);\n            throw new Error('Resposta da IA não contém JSON válido');\n          }\n        } catch (jsonError) {\n          console.error('Erro ao processar resposta JSON:', jsonError);\n          console.error('Resposta completa da IA:', text);\n          throw new Error(`Erro na resposta da IA. Formato JSON inválido: ${(jsonError === null || jsonError === void 0 ? void 0 : jsonError.message) || 'Erro desconhecido'}`);\n        }\n      default:\n        throw new Error(`Tipo de conteúdo não suportado: ${type}`);\n    }\n  } catch (error) {\n    var _error$message, _error$message2, _error$message3, _error$message4, _error$message5;\n    console.error('❌ Erro ao gerar conteúdo:', error);\n\n    // Tratamento específico de erros comuns\n    if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('API key')) {\n      throw new Error('API key do Gemini não configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');\n    }\n    if ((_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('quota') || (_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes('limit')) {\n      throw new Error('Limite de uso da API do Gemini excedido. Tente novamente mais tarde');\n    }\n    if ((_error$message4 = error.message) !== null && _error$message4 !== void 0 && _error$message4.includes('network') || (_error$message5 = error.message) !== null && _error$message5 !== void 0 && _error$message5.includes('fetch')) {\n      throw new Error('Erro de conexão. Verifique sua internet e tente novamente');\n    }\n\n    // Erro genérico com mais detalhes\n    throw new Error(`Falha ao gerar conteúdo: ${error.message || 'Erro desconhecido'}`);\n  }\n};\n\n// Função legada para compatibilidade (gera todos os tipos de conteúdo)\nexport const processDocuments = async (documents, additionalInfo, projectId) => {\n  console.log('🚀 Iniciando processamento de documentos...');\n  console.log('📄 Documentos recebidos:', documents.length);\n  console.log('📝 Informações adicionais:', additionalInfo ? 'Sim' : 'Não');\n  try {\n    // Verificar API key primeiro\n    if (!API_KEY) {\n      throw new Error('API key do Gemini não configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');\n    }\n    console.log('✅ API key configurada');\n    let prContent = '';\n    let flowchartData = {\n      nodes: [],\n      edges: []\n    };\n    let tasksData = {\n      epics: [],\n      tasks: []\n    };\n\n    // Gerar PR\n    try {\n      console.log('📋 Gerando PR...');\n      prContent = await generateContent('pr', documents, additionalInfo, projectId);\n      console.log('✅ PR gerado com sucesso:', prContent.length, 'caracteres');\n    } catch (error) {\n      console.error('❌ Erro ao gerar PR:', error.message);\n      prContent = `Erro ao gerar PR: ${error.message}`;\n    }\n\n    // Gerar flowchart\n    try {\n      var _flowchartData$nodes, _flowchartData$edges;\n      console.log('📊 Gerando fluxograma...');\n      flowchartData = await generateContent('flowchart', documents, additionalInfo, projectId);\n      console.log('✅ Fluxograma gerado:', ((_flowchartData$nodes = flowchartData.nodes) === null || _flowchartData$nodes === void 0 ? void 0 : _flowchartData$nodes.length) || 0, 'nós,', ((_flowchartData$edges = flowchartData.edges) === null || _flowchartData$edges === void 0 ? void 0 : _flowchartData$edges.length) || 0, 'conexões');\n    } catch (error) {\n      console.error('❌ Erro ao gerar fluxograma:', error.message);\n      flowchartData = {\n        nodes: [],\n        edges: []\n      };\n    }\n\n    // Gerar tasks\n    try {\n      var _tasksData$tasks, _tasksData$epics;\n      console.log('📝 Gerando tasks...');\n      tasksData = await generateContent('tasks', documents, additionalInfo, projectId);\n      console.log('✅ Tasks geradas:', ((_tasksData$tasks = tasksData.tasks) === null || _tasksData$tasks === void 0 ? void 0 : _tasksData$tasks.length) || 0, 'tasks,', ((_tasksData$epics = tasksData.epics) === null || _tasksData$epics === void 0 ? void 0 : _tasksData$epics.length) || 0, 'épicos');\n    } catch (error) {\n      console.error('❌ Erro ao gerar tasks:', error.message);\n      tasksData = {\n        epics: [],\n        tasks: []\n      };\n    }\n\n    // Converter tasks para o formato esperado\n    const tasks = [];\n    if (tasksData.tasks && Array.isArray(tasksData.tasks)) {\n      tasksData.tasks.forEach((task, index) => {\n        tasks.push({\n          id: `task-${index + 1}`,\n          title: task.title,\n          description: task.description,\n          storyPoints: task.story_points,\n          status: 'pending',\n          category: task.category,\n          criteria: task.acceptance_criteria || []\n        });\n      });\n    }\n    const result = {\n      title: documents.length > 0 ? documents[0].name : 'Projeto',\n      description: prContent.substring(0, 200) + '...',\n      flowchart: flowchartData,\n      tasks: tasks\n    };\n    console.log('🎉 Processamento concluído com sucesso!');\n    return result;\n  } catch (error) {\n    console.error('❌ Erro crítico ao processar documentos:', error);\n\n    // Retornar resultado parcial se possível\n    const fallbackResult = {\n      title: documents.length > 0 ? documents[0].name : 'Projeto',\n      description: 'Erro ao processar documentos: ' + error.message,\n      flowchart: {\n        nodes: [],\n        edges: []\n      },\n      tasks: []\n    };\n    console.log('⚠️ Retornando resultado fallback devido ao erro');\n    return fallbackResult;\n  }\n};\nexport const extractTextFromFile = async file => {\n  // Implementação básica para extração de texto\n  // Em um ambiente real, você precisaria de bibliotecas específicas para cada tipo de arquivo\n\n  if (file.type === 'text/markdown' || file.type === 'text/plain') {\n    return await file.text();\n  } else if (file.type === 'application/pdf') {\n    // Para PDF, você precisaria de uma biblioteca como pdf-parse\n    throw new Error('Processamento de PDF ainda não implementado');\n  } else if (file.type.includes('document')) {\n    // Para DOCX, você precisaria de uma biblioteca como mammoth\n    throw new Error('Processamento de DOCX ainda não implementado');\n  }\n  return '';\n};","map":{"version":3,"names":["GoogleGenerativeAI","supabase","supportMaterials","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","DEFAULT_PROMPTS","pr","flowchart","tasks","cachedPrompts","cacheTimestamp","CACHE_DURATION","getGlobalPrompts","now","Date","data","from","select","eq","message","includes","promptsObject","Array","isArray","forEach","prompt","type","content","invalidatePromptsCache","getProjectSupportMaterials","projectId","log","list","length","defaultData","defaultError","order","ascending","materialsByType","material","substring","id","name","is_default","content_length","Object","keys","map","_materialsByType$type","generatePrompt","documentContent","additionalInfo","globalPrompts","technicalInstructions","domainContext","finalPrompt","projectMaterial","toUpperCase","trim","validateApiKey","isValidFormat","startsWith","testGeminiConnection","model","getGenerativeModel","testPrompt","result","generateContent","response","text","debugSupportMaterials","projectMaterials","defaultMaterials","documents","Error","doc","index","jsonText","codeBlockMatch","match","jsonMatch","JSON","parse","parseError","jsonError","_error$message","_error$message2","_error$message3","_error$message4","_error$message5","processDocuments","prContent","flowchartData","nodes","edges","tasksData","epics","_flowchartData$nodes","_flowchartData$edges","_tasksData$tasks","_tasksData$epics","task","push","title","description","storyPoints","story_points","status","category","criteria","acceptance_criteria","fallbackResult","extractTextFromFile","file"],"sources":["/Users/matheuspina/Desktop/briefy-new/src/services/geminiService.ts"],"sourcesContent":["/**\n * ARQUITETURA DE PROMPTS - IMPORTANTE\n *\n * 1. DEFAULT_PROMPTS (hardcoded): Contém instruções técnicas sobre:\n *    - Como a IA deve se comportar (papel/função)\n *    - Formato de resposta esperado (JSON, texto, etc.)\n *    - Estrutura de dados obrigatória\n *    - Regras de parsing e validação\n *\n * 2. PROMPTS GLOBAIS (banco de dados): Devem conter APENAS:\n *    - Contexto específico do domínio/negócio\n *    - Informações contextuais adicionais\n *    - Preferências específicas do cliente/usuário\n *    - NUNCA instruções técnicas sobre formato de resposta\n *\n *    EXEMPLOS de prompts globais (APENAS contexto):\n *    - \"Este é um sistema de e-commerce para vendas online\"\n *    - \"Cliente trabalha com gestão de clínicas médicas\"\n *    - \"Priorizar segurança e conformidade com LGPD\"\n *    - \"Sistema deve ser compatível com dispositivos móveis\"\n *\n * 3. CONTEÚDO DINÂMICO:\n *    - Conteúdo dos documentos do projeto\n *    - Informações adicionais fornecidas pelo usuário\n *\n * Combinação final: Instruções Técnicas + Contexto Específico + Conteúdo do Projeto\n */\n\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport { DocumentFile, ProjectScope } from '../types';\nimport { supabase } from '../lib/supabase';\nimport { supportMaterials } from '../lib/supabase';\n\n// Configuração da API key do Gemini\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY || '';\n\nif (!API_KEY) {\n  console.error('❌ REACT_APP_GEMINI_API_KEY não configurada no arquivo .env');\n  console.error('📝 Para configurar: crie um arquivo .env na raiz do projeto com:');\n  console.error('   REACT_APP_GEMINI_API_KEY=sua_api_key_aqui');\n  console.error('🔑 Obtenha sua API key em: https://makersuite.google.com/app/apikey');\n}\n\nlet genAI: GoogleGenerativeAI;\ntry {\n  genAI = new GoogleGenerativeAI(API_KEY);\n} catch (error) {\n  console.error('❌ Erro ao inicializar GoogleGenerativeAI:', error);\n}\n\n// Prompts padrão (fallback)\nconst DEFAULT_PROMPTS = {\n  pr: `Você é um especialista em análise de requisitos e criação de documentos técnicos.\nCom base nos documentos fornecidos, gere um DOCUMENTO TÉCNICO DETALHADO (PR) incluindo:\n- Visão geral do projeto\n- Objetivos e metas\n- Arquitetura proposta\n- Tecnologias e ferramentas\n- Estimativa de esforço\n- Riscos identificados\n- Prazos estimados\n- Orçamento aproximado\n\nRetorne apenas o texto do documento técnico, sem formatação JSON.`,\n\n  flowchart: `Você é um especialista em modelagem de processos e criação de fluxogramas técnicos.\nCom base nos documentos fornecidos, gere um FLUXOGRAMA em formato JSON válido que represente o fluxo completo do projeto/processo.\n\n**INSTRUÇÕES IMPORTANTES:**\n\n1. **ANÁLISE DO PROCESSO**: Identifique as etapas principais do processo, pontos de decisão, entradas e saídas.\n\n2. **CRIAÇÃO DE NÓS**:\n   - **input**: Pontos de entrada, início do processo\n   - **process**: Atividades, tarefas, processamento de dados\n   - **output**: Resultados, fim do processo\n   - **decision**: Pontos de decisão com ramificações (sim/não)\n\n3. **POSICIONAMENTO**: Distribua os nós de forma lógica no diagrama:\n   - Fluxo de cima para baixo ou esquerda para direita\n   - Agrupe nós relacionados\n   - Mantenha distância adequada entre nós\n\n4. **CONEXÕES**: Cada edge deve conectar exatamente 2 nós existentes.\n\n**ESTRUTURA OBRIGATÓRIA**: Retorne APENAS um JSON válido (sem texto adicional):\n\n{\n  \"nodes\": [\n    {\n      \"id\": \"string_unico\",\n      \"type\": \"input|process|output|decision\",\n      \"label\": \"Descrição clara e concisa do nó\",\n      \"position\": {\"x\": number, \"y\": number}\n    }\n  ],\n  \"edges\": [\n    {\n      \"id\": \"edge_string_unico\",\n      \"source\": \"id_do_no_origem\",\n      \"target\": \"id_do_no_destino\",\n      \"label\": \"rótulo_opcional_da_conexao\"\n    }\n  ]\n}\n\n**EXEMPLO DE FLUXOGRAMA BEM ESTRUTURADO:**\n\n{\n  \"nodes\": [\n    {\"id\": \"start\", \"type\": \"input\", \"label\": \"Início do Processo\", \"position\": {\"x\": 100, \"y\": 100}},\n    {\"id\": \"login\", \"type\": \"process\", \"label\": \"Processar Login\", \"position\": {\"x\": 300, \"y\": 100}},\n    {\"id\": \"auth_check\", \"type\": \"decision\", \"label\": \"Credenciais Válidas?\", \"position\": {\"x\": 500, \"y\": 100}},\n    {\"id\": \"dashboard\", \"type\": \"process\", \"label\": \"Carregar Dashboard\", \"position\": {\"x\": 300, \"y\": 300}},\n    {\"id\": \"error\", \"type\": \"output\", \"label\": \"Mostrar Erro\", \"position\": {\"x\": 700, \"y\": 100}},\n    {\"id\": \"logout\", \"type\": \"output\", \"label\": \"Logout do Sistema\", \"position\": {\"x\": 500, \"y\": 300}}\n  ],\n  \"edges\": [\n    {\"id\": \"e1\", \"source\": \"start\", \"target\": \"login\"},\n    {\"id\": \"e2\", \"source\": \"login\", \"target\": \"auth_check\"},\n    {\"id\": \"e3\", \"source\": \"auth_check\", \"target\": \"dashboard\", \"label\": \"Sim\"},\n    {\"id\": \"e4\", \"source\": \"auth_check\", \"target\": \"error\", \"label\": \"Não\"},\n    {\"id\": \"e5\", \"source\": \"dashboard\", \"target\": \"logout\"}\n  ]\n}\n\n**REGRAS IMPORTANTES:**\n- Use IDs únicos para todos os nós e edges\n- Todas as conexões devem referenciar IDs existentes\n- Posições devem formar um layout lógico e legível\n- Labels devem ser concisos mas descritivos\n- Certifique-se de que o JSON seja válido e parseável`,\n\n  tasks: `Você é um especialista em gerenciamento de projetos ágeis e criação de tarefas detalhadas.\nCom base nos documentos fornecidos, analise o projeto e crie uma estrutura completa de ÉPICOS e TASKS seguindo as melhores práticas ágeis.\n\n**INSTRUÇÕES IMPORTANTES:**\n\n1. **ANÁLISE DO PROJETO**: Primeiro, identifique os principais módulos/componentes do sistema e funcionalidades principais.\n\n2. **CRIAÇÃO DE ÉPICOS**: Cada épico deve representar uma funcionalidade ou módulo principal do sistema.\n   - Use nomes descritivos e objetivos\n   - Inclua descrição detalhada do que o épico abrange\n   - Defina prioridade baseada na criticidade para o negócio\n\n3. **CRIAÇÃO DE TASKS**: Para cada épico, crie tasks específicas e mensuráveis.\n   - Cada task deve ter um objetivo claro e específico\n   - Use verbos de ação no título (Implementar, Criar, Configurar, etc.)\n   - Defina story points realistas baseados na complexidade\n   - Categorize corretamente por tipo de trabalho\n   - Inclua critérios de aceite específicos e testáveis\n\n4. **ESTRUTURA OBRIGATÓRIA**: Retorne APENAS um JSON válido com esta estrutura:\n\n{\n  \"epics\": [\n    {\n      \"title\": \"Nome descritivo do épico\",\n      \"description\": \"Descrição detalhada do que este épico abrange, incluindo objetivos e contexto\",\n      \"priority\": \"high|medium|low\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"title\": \"Verbo + Objetivo específico da task\",\n      \"description\": \"Descrição detalhada do que deve ser implementado, incluindo contexto e dependências\",\n      \"story_points\": 1|2|3|5|8|13,\n      \"category\": \"frontend|backend|design|testing|devops|database|security|documentation|infrastructure|mobile|api\",\n      \"epic_index\": 0,\n      \"acceptance_criteria\": [\n        \"Critério específico e testável 1\",\n        \"Critério específico e testável 2\",\n        \"Critério específico e testável 3\"\n      ],\n      \"priority\": \"high|medium|low\",\n      \"estimated_hours\": 2|4|8|16|24|40\n    }\n  ]\n}\n\n**DIRETRIZES PARA STORY POINTS:**\n- 1: Tarefa muito simples, poucos minutos\n- 2: Tarefa simples, até 2 horas\n- 3: Tarefa média, até 4 horas\n- 5: Tarefa complexa, até 8 horas\n- 8: Tarefa muito complexa, até 16 horas\n- 13: Tarefa extremamente complexa, até 24+ horas\n\n**CATEGORIAS DISPONÍVEIS:**\n- frontend: Interface do usuário, componentes React/Vue/Angular\n- backend: APIs, lógica de negócio, serviços\n- design: UI/UX, protótipos, wireframes\n- testing: Testes unitários, integração, e2e\n- devops: CI/CD, infraestrutura, deploy\n- database: Modelagem, migrations, otimização\n- security: Autenticação, autorização, criptografia\n- documentation: Documentação técnica e de usuário\n- infrastructure: Servidores, redes, configuração\n- mobile: Apps mobile, responsividade\n- api: Integrações, webhooks, APIs externas\n\n**EXEMPLO DE TASK BEM ESTRUTURADA:**\n{\n  \"title\": \"Implementar sistema de autenticação OAuth2\",\n  \"description\": \"Criar sistema completo de login usando Google OAuth2, incluindo middleware, validação de tokens e refresh tokens\",\n  \"story_points\": 8,\n  \"category\": \"backend\",\n  \"epic_index\": 0,\n  \"acceptance_criteria\": [\n    \"Usuário pode fazer login com Google\",\n    \"Token JWT é gerado e validado corretamente\",\n    \"Middleware de autenticação protege rotas\",\n    \"Refresh token funciona para renovar sessão\",\n    \"Logout invalida tokens corretamente\"\n  ],\n  \"priority\": \"high\",\n  \"estimated_hours\": 16\n}`\n};\n\n// Cache para prompts globais\nlet cachedPrompts: any = null;\nlet cacheTimestamp: number = 0;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutos\n\n// Função para obter prompts globais do banco de dados\n// NOTA: Os prompts globais devem conter APENAS contexto específico do domínio/negócio\n// Instruções técnicas sobre formato de resposta ficam nos DEFAULT_PROMPTS\nexport const getGlobalPrompts = async (): Promise<any> => {\n  try {\n    // Verificar cache\n    const now = Date.now();\n    if (cachedPrompts && (now - cacheTimestamp) < CACHE_DURATION) {\n      return cachedPrompts;\n    }\n\n    // Buscar do banco de dados (apenas prompts ativos)\n    const { data, error } = await supabase\n      .from('global_prompts')\n      .select('*')\n      .eq('is_active', true);\n\n    if (error && error.message.includes('relation \"global_prompts\" does not exist')) {\n      // Usar prompts padrão se a tabela não existir\n      cachedPrompts = DEFAULT_PROMPTS;\n      cacheTimestamp = now;\n      return cachedPrompts;\n    } else if (error) {\n      console.error('Erro ao buscar prompts globais:', error);\n      return DEFAULT_PROMPTS;\n    }\n\n    // Converter array para objeto - apenas contexto específico, não instruções técnicas\n    const promptsObject: any = { ...DEFAULT_PROMPTS }\n    if (data && Array.isArray(data)) {\n      data.forEach(prompt => {\n        if (prompt.type && prompt.content) {\n          // Se o conteúdo for diferente do padrão, assume que é contexto específico\n          if (prompt.content !== DEFAULT_PROMPTS[prompt.type as keyof typeof DEFAULT_PROMPTS]) {\n            promptsObject[prompt.type] = prompt.content;\n          }\n        }\n      });\n    }\n\n    cachedPrompts = promptsObject;\n    cacheTimestamp = now;\n    return cachedPrompts;\n  } catch (error) {\n    console.error('Erro ao obter prompts globais:', error);\n    return DEFAULT_PROMPTS;\n  }\n}\n\n// Função para invalidar cache de prompts\nexport const invalidatePromptsCache = () => {\n  cachedPrompts = null;\n  cacheTimestamp = 0;\n}\n\n// Função para gerar prompt específico baseado no tipo\n// Função para buscar materiais de apoio de um projeto\nconst getProjectSupportMaterials = async (projectId: string) => {\n  try {\n    console.log('🔍 Buscando materiais de apoio do projeto:', projectId);\n\n    // Primeiro tentar buscar materiais específicos do projeto\n    let { data, error } = await supportMaterials.list(projectId);\n\n    // Se não encontrar materiais específicos, buscar materiais padrão/globais\n    if (!data || data.length === 0) {\n      console.log('⚠️ Nenhum material específico encontrado, buscando materiais padrão...');\n      const { data: defaultData, error: defaultError } = await supabase\n        .from('support_materials')\n        .select('*')\n        .eq('is_default', true)\n        .order('created_at', { ascending: false });\n\n      if (!defaultError && defaultData && defaultData.length > 0) {\n        console.log('✅ Materiais padrão encontrados:', defaultData.length);\n        data = defaultData;\n      }\n    }\n\n    if (error) {\n      console.error('❌ Erro ao buscar materiais de apoio:', error);\n      return {};\n    }\n\n    // Organizar por tipo\n    const materialsByType: any = {};\n    (data || []).forEach(material => {\n      materialsByType[material.type] = material.content;\n      console.log(`📄 Material ${material.type} encontrado:`, material.content.substring(0, 100) + '...');\n      console.log(`📊 Detalhes do material ${material.type}:`, {\n        id: material.id,\n        name: material.name,\n        type: material.type,\n        is_default: material.is_default,\n        content_length: material.content.length\n      });\n    });\n\n    console.log('✅ Materiais de apoio encontrados:', Object.keys(materialsByType));\n    console.log('📋 Resumo dos materiais por tipo:', Object.keys(materialsByType).map(type => ({\n      type,\n      length: materialsByType[type]?.length || 0\n    })));\n    return materialsByType;\n  } catch (error) {\n    console.error('❌ Erro ao buscar materiais de apoio:', error);\n    return {};\n  }\n};\n\nconst generatePrompt = async (type: 'pr' | 'flowchart' | 'tasks', documentContent: string, additionalInfo: string, projectId?: string): Promise<string> => {\n  const globalPrompts = await getGlobalPrompts();\n\n  // Usar instruções técnicas do prompt hardcoded + contexto específico do global\n  const technicalInstructions = DEFAULT_PROMPTS[type];\n  const domainContext = globalPrompts[type];\n\n  // Combinar: instruções técnicas + contexto específico + conteúdo\n  let finalPrompt = technicalInstructions;\n\n  // Adicionar contexto específico se existir e for diferente do padrão\n  if (domainContext && domainContext !== technicalInstructions) {\n    finalPrompt += `\\n\\n--- CONTEXTO ESPECÍFICO DO DOMÍNIO ---\\n${domainContext}`;\n  }\n\n  // Buscar e adicionar materiais de apoio se projectId for fornecido\n  if (projectId) {\n    console.log(`🔍 Buscando materiais de apoio do tipo \"${type}\" para o projeto: ${projectId}`);\n    const supportMaterials = await getProjectSupportMaterials(projectId);\n    const projectMaterial = supportMaterials[type];\n\n    if (projectMaterial) {\n      finalPrompt += `\\n\\n--- MATERIAL DE APOIO PERSONALIZADO (${type.toUpperCase()}) ---\\n${projectMaterial}`;\n      console.log(`✅ Material de apoio ${type} adicionado ao prompt (${projectMaterial.length} caracteres)`);\n      console.log(`📋 Conteúdo do material ${type}:`, projectMaterial.substring(0, 150) + '...');\n    } else {\n      console.log(`⚠️ Nenhum material de apoio ${type} encontrado para o projeto ${projectId}`);\n      console.log(`📊 Materiais disponíveis:`, Object.keys(supportMaterials));\n    }\n  } else {\n    console.log(`ℹ️ Sem projectId fornecido, usando apenas prompts padrão`);\n  }\n\n  // Adicionar conteúdo dos documentos\n  finalPrompt += `\\n\\n--- CONTEÚDO DOS DOCUMENTOS ---\\n${documentContent}`;\n\n  // Adicionar informações adicionais se fornecidas\n  if (additionalInfo.trim()) {\n    finalPrompt += `\\n\\n--- INFORMAÇÕES ADICIONAIS ---\\n${additionalInfo}`;\n  }\n\n  return finalPrompt;\n}\n\nexport const validateApiKey = (): boolean => {\n  if (!API_KEY) {\n    console.error('❌ API key do Gemini não configurada');\n    console.error('📝 Configure REACT_APP_GEMINI_API_KEY no arquivo .env');\n    console.error('🔑 Obtenha sua API key em: https://makersuite.google.com/app/apikey');\n    return false;\n  }\n\n  // Verificar se a API key tem formato válido (chaves do Google AI começam com \"AIza\")\n  const isValidFormat = API_KEY.startsWith('AIza');\n  if (!isValidFormat) {\n    console.error('❌ Formato da API key inválido. As chaves do Google AI começam com \"AIza\"');\n    console.error('🔍 Sua chave atual:', API_KEY.substring(0, 10) + '...');\n    return false;\n  }\n\n  console.log('✅ API key do Gemini configurada corretamente');\n  return true;\n}\n\n// Função para testar conexão com Gemini\nexport const testGeminiConnection = async (): Promise<boolean> => {\n  console.log('🧪 Testando conexão com Gemini...');\n\n  if (!validateApiKey()) {\n    return false;\n  }\n\n  try {\n    if (!genAI) {\n      console.error('❌ Falha ao inicializar serviço do Gemini');\n      return false;\n    }\n\n    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });\n\n    // Teste simples com prompt mínimo\n    const testPrompt = 'Responda apenas com \"OK\" se você recebeu esta mensagem.';\n    const result = await model.generateContent(testPrompt);\n    const response = await result.response;\n    const text = response.text();\n\n    console.log('✅ Conexão com Gemini funcionando:', text.trim());\n    return true;\n\n  } catch (error: any) {\n    console.error('❌ Erro na conexão com Gemini:', error.message);\n    return false;\n  }\n}\n\n// Função de debug para verificar materiais de apoio\nexport const debugSupportMaterials = async (projectId?: string) => {\n  console.log('🔍 DEBUG: Verificando materiais de apoio...');\n\n  try {\n    // Verificar materiais específicos do projeto\n    if (projectId) {\n      console.log(`📊 Verificando materiais para projeto: ${projectId}`);\n      const { data: projectMaterials } = await supportMaterials.list(projectId);\n      console.log('📋 Materiais específicos do projeto:', projectMaterials?.length || 0);\n    }\n\n    // Verificar materiais padrão/globais\n    const { data: defaultMaterials, error } = await supabase\n      .from('support_materials')\n      .select('*')\n      .eq('is_default', true)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('❌ Erro ao buscar materiais padrão:', error);\n      return;\n    }\n\n    console.log('📋 Materiais padrão encontrados:', defaultMaterials?.length || 0);\n    if (defaultMaterials && defaultMaterials.length > 0) {\n      defaultMaterials.forEach(material => {\n        console.log(`  - ${material.type}: ${material.name} (${material.content.length} chars)`);\n      });\n    } else {\n      console.log('⚠️ Nenhum material padrão encontrado! Configure na tela de materiais de apoio.');\n    }\n\n  } catch (error) {\n    console.error('❌ Erro no debug de materiais:', error);\n  }\n};\n\n// Função para processar documentos e gerar conteúdo específico\nexport const generateContent = async (\n  type: 'pr' | 'flowchart' | 'tasks',\n  documents: DocumentFile[],\n  additionalInfo: string,\n  projectId?: string\n): Promise<any> => {\n  try {\n    // Validação da API key\n    if (!API_KEY) {\n      throw new Error('API key do Gemini não configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');\n    }\n\n    if (!genAI) {\n      throw new Error('Falha ao inicializar o serviço do Gemini. Verifique se a API key é válida');\n    }\n\n    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });\n\n    // Preparar o conteúdo dos documentos\n    let documentContent = '';\n    documents.forEach((doc, index) => {\n      documentContent += `\\n--- DOCUMENTO ${index + 1}: ${doc.name} ---\\n`;\n      documentContent += doc.content;\n      documentContent += '\\n';\n    });\n\n    const prompt = await generatePrompt(type, documentContent, additionalInfo, projectId);\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n\n    // Processar resposta baseado no tipo\n    switch (type) {\n      case 'pr':\n        // Para PR, retorna o texto diretamente\n        return text.trim();\n\n      case 'flowchart':\n      case 'tasks':\n        // Para flowchart e tasks, tenta extrair JSON\n        try {\n          let jsonText = '';\n\n          // Método 1: Tentar extrair JSON de blocos de código markdown\n          const codeBlockMatch = text.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/);\n          if (codeBlockMatch) {\n            jsonText = codeBlockMatch[1];\n          } else {\n            // Método 2: Procurar por JSON válido na resposta\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n              jsonText = jsonMatch[0];\n            }\n          }\n\n          if (jsonText) {\n            // Limpar o texto JSON (remover espaços extras, quebras de linha desnecessárias)\n            jsonText = jsonText.trim();\n\n            // Verificar se é um JSON válido antes de parsear\n            try {\n              JSON.parse(jsonText);\n              console.log(`✅ JSON ${type} parseado com sucesso`);\n              return JSON.parse(jsonText);\n            } catch (parseError: any) {\n              console.error(`❌ JSON ${type} inválido:`, parseError);\n              console.error('Texto que falhou:', jsonText);\n              throw new Error(`JSON ${type} inválido: ${parseError?.message || 'Erro desconhecido'}`);\n            }\n          } else {\n            console.error('❌ Nenhum JSON encontrado na resposta:', text);\n            throw new Error('Resposta da IA não contém JSON válido');\n          }\n        } catch (jsonError: any) {\n          console.error('Erro ao processar resposta JSON:', jsonError);\n          console.error('Resposta completa da IA:', text);\n          throw new Error(`Erro na resposta da IA. Formato JSON inválido: ${jsonError?.message || 'Erro desconhecido'}`);\n        }\n\n      default:\n        throw new Error(`Tipo de conteúdo não suportado: ${type}`);\n    }\n  } catch (error: any) {\n    console.error('❌ Erro ao gerar conteúdo:', error);\n\n    // Tratamento específico de erros comuns\n    if (error.message?.includes('API key')) {\n      throw new Error('API key do Gemini não configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');\n    }\n\n    if (error.message?.includes('quota') || error.message?.includes('limit')) {\n      throw new Error('Limite de uso da API do Gemini excedido. Tente novamente mais tarde');\n    }\n\n    if (error.message?.includes('network') || error.message?.includes('fetch')) {\n      throw new Error('Erro de conexão. Verifique sua internet e tente novamente');\n    }\n\n    // Erro genérico com mais detalhes\n    throw new Error(`Falha ao gerar conteúdo: ${error.message || 'Erro desconhecido'}`);\n  }\n}\n\n// Função legada para compatibilidade (gera todos os tipos de conteúdo)\nexport const processDocuments = async (documents: DocumentFile[], additionalInfo: string, projectId?: string): Promise<ProjectScope> => {\n  console.log('🚀 Iniciando processamento de documentos...');\n  console.log('📄 Documentos recebidos:', documents.length);\n  console.log('📝 Informações adicionais:', additionalInfo ? 'Sim' : 'Não');\n\n  try {\n    // Verificar API key primeiro\n    if (!API_KEY) {\n      throw new Error('API key do Gemini não configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');\n    }\n    console.log('✅ API key configurada');\n\n    let prContent = '';\n    let flowchartData: any = { nodes: [], edges: [] };\n    let tasksData: any = { epics: [], tasks: [] };\n\n    // Gerar PR\n    try {\n      console.log('📋 Gerando PR...');\n      prContent = await generateContent('pr', documents, additionalInfo, projectId);\n      console.log('✅ PR gerado com sucesso:', prContent.length, 'caracteres');\n    } catch (error: any) {\n      console.error('❌ Erro ao gerar PR:', error.message);\n      prContent = `Erro ao gerar PR: ${error.message}`;\n    }\n\n    // Gerar flowchart\n    try {\n      console.log('📊 Gerando fluxograma...');\n      flowchartData = await generateContent('flowchart', documents, additionalInfo, projectId);\n      console.log('✅ Fluxograma gerado:', flowchartData.nodes?.length || 0, 'nós,', flowchartData.edges?.length || 0, 'conexões');\n    } catch (error: any) {\n      console.error('❌ Erro ao gerar fluxograma:', error.message);\n      flowchartData = { nodes: [], edges: [] };\n    }\n\n    // Gerar tasks\n    try {\n      console.log('📝 Gerando tasks...');\n      tasksData = await generateContent('tasks', documents, additionalInfo, projectId);\n      console.log('✅ Tasks geradas:', tasksData.tasks?.length || 0, 'tasks,', tasksData.epics?.length || 0, 'épicos');\n    } catch (error: any) {\n      console.error('❌ Erro ao gerar tasks:', error.message);\n      tasksData = { epics: [], tasks: [] };\n    }\n\n    // Converter tasks para o formato esperado\n    const tasks: any[] = [];\n    if (tasksData.tasks && Array.isArray(tasksData.tasks)) {\n      tasksData.tasks.forEach((task: any, index: number) => {\n        tasks.push({\n          id: `task-${index + 1}`,\n          title: task.title,\n          description: task.description,\n          storyPoints: task.story_points,\n          status: 'pending',\n          category: task.category,\n          criteria: task.acceptance_criteria || []\n        });\n      });\n    }\n\n    const result = {\n      title: documents.length > 0 ? documents[0].name : 'Projeto',\n      description: prContent.substring(0, 200) + '...',\n      flowchart: flowchartData,\n      tasks: tasks\n    };\n\n    console.log('🎉 Processamento concluído com sucesso!');\n    return result;\n\n  } catch (error: any) {\n    console.error('❌ Erro crítico ao processar documentos:', error);\n\n    // Retornar resultado parcial se possível\n    const fallbackResult: ProjectScope = {\n      title: documents.length > 0 ? documents[0].name : 'Projeto',\n      description: 'Erro ao processar documentos: ' + error.message,\n      flowchart: { nodes: [], edges: [] },\n      tasks: []\n    };\n\n    console.log('⚠️ Retornando resultado fallback devido ao erro');\n    return fallbackResult;\n  }\n}\n\nexport const extractTextFromFile = async (file: File): Promise<string> => {\n  // Implementação básica para extração de texto\n  // Em um ambiente real, você precisaria de bibliotecas específicas para cada tipo de arquivo\n\n  if (file.type === 'text/markdown' || file.type === 'text/plain') {\n    return await file.text();\n  } else if (file.type === 'application/pdf') {\n    // Para PDF, você precisaria de uma biblioteca como pdf-parse\n    throw new Error('Processamento de PDF ainda não implementado');\n  } else if (file.type.includes('document')) {\n    // Para DOCX, você precisaria de uma biblioteca como mammoth\n    throw new Error('Processamento de DOCX ainda não implementado');\n  }\n\n  return '';\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE;AAE1D,IAAI,CAACH,OAAO,EAAE;EACZI,OAAO,CAACC,KAAK,CAAC,4DAA4D,CAAC;EAC3ED,OAAO,CAACC,KAAK,CAAC,kEAAkE,CAAC;EACjFD,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;EAC7DD,OAAO,CAACC,KAAK,CAAC,qEAAqE,CAAC;AACtF;AAEA,IAAIC,KAAyB;AAC7B,IAAI;EACFA,KAAK,GAAG,IAAIT,kBAAkB,CAACG,OAAO,CAAC;AACzC,CAAC,CAAC,OAAOK,KAAK,EAAE;EACdD,OAAO,CAACC,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;AACnE;;AAEA;AACA,MAAME,eAAe,GAAG;EACtBC,EAAE,EAAE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;EAEhEC,SAAS,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;EAEpDC,KAAK,EAAE;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}