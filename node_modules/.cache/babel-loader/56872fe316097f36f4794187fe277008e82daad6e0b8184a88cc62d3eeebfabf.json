{"ast":null,"code":"var _jsxFileName = \"/Users/matheuspina/Desktop/briefy-new/src/App.tsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from 'react-router-dom';\nimport { LoginPage } from './components/LoginPage';\nimport { projects } from './lib/supabase';\nimport { saveGeneratedContent } from './services/projectContentService';\nimport { HomePage, ProjectsPage, FlowchartsPage, SettingsPage } from './pages';\nimport { MainLayout } from './layouts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  // Authentication states\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Project states\n  const [currentProject, setCurrentProject] = useState(null);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [selectedProjectContent, setSelectedProjectContent] = useState(null);\n\n  // New states for advanced features\n  const [currentSession, setCurrentSession] = useState(null);\n\n  // New handlers for advanced features\n  const handleStartSession = () => {\n    const newSession = {\n      id: `session-${Date.now()}`,\n      title: 'Nova Sessão de Processamento',\n      description: 'Sessão criada automaticamente',\n      status: 'preparing',\n      currentStep: 'Preparação do Material',\n      documents: [],\n      videos: [],\n      supportMaterials: {\n        tasks: {\n          id: 'default-tasks',\n          name: 'Material de Apoio - Tasks',\n          type: 'tasks',\n          content: 'Material padrão para geração de tasks',\n          isDefault: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        flowchart: {\n          id: 'default-flowchart',\n          name: 'Material de Apoio - Fluxograma',\n          type: 'flowchart',\n          content: 'Material padrão para geração de fluxograma',\n          isDefault: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        pr: {\n          id: 'default-pr',\n          name: 'Material de Apoio - PR',\n          type: 'pr',\n          content: 'Material padrão para geração de PR',\n          isDefault: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    setCurrentSession(newSession);\n  };\n  const handleUpdateSession = session => {\n    setCurrentSession(session);\n  };\n\n  // Project handlers\n  const handleCreateProject = (projectName, mode) => {\n    const newProject = {\n      id: `project-${Date.now()}`,\n      name: projectName,\n      description: `Projeto criado via ${mode === 'briefy' ? 'Briefy' : 'Manual'}`,\n      user_id: (user === null || user === void 0 ? void 0 : user.id) || 'current-user',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    setCurrentProject(newProject);\n    console.log(`Projeto criado: ${projectName} no modo ${mode}`);\n  };\n  const handleProjectCreated = async (project, scope) => {\n    console.log('Projeto sendo processado:', project);\n    console.log('Dados do scope:', scope);\n    let savedProject = project;\n    try {\n      // Salvar o projeto no banco de dados primeiro\n      const {\n        data: dbProject,\n        error\n      } = await projects.create(project.name, project.description);\n      if (error) {\n        console.error('Erro ao salvar projeto no banco:', error);\n        // Mesmo com erro, continuar com o fluxo para não bloquear o usuário\n      } else {\n        console.log('Projeto salvo no banco:', dbProject);\n        savedProject = dbProject;\n        setCurrentProject(dbProject);\n      }\n\n      // Salvar o conteúdo gerado (PR, fluxograma, tasks) no banco\n      if (scope && savedProject) {\n        try {\n          console.log('Salvando conteúdo gerado no banco...');\n\n          // Preparar dados no formato esperado pelo saveGeneratedContent\n          const generatedContent = {\n            pr: scope.pr || '',\n            flowchart: scope.flowchart || {\n              nodes: [],\n              edges: []\n            },\n            epics: scope.epics || [],\n            tasks: scope.tasks || []\n          };\n          const saveResult = await saveGeneratedContent(savedProject.id, generatedContent, {\n            savePR: true,\n            saveFlowchart: true,\n            saveTasks: true\n          });\n          if (saveResult.success) {\n            var _saveResult$epics, _saveResult$tasks;\n            console.log('✅ Conteúdo salvo com sucesso:', {\n              pr: !!saveResult.pr,\n              flowchart: !!saveResult.flowchart,\n              epics: ((_saveResult$epics = saveResult.epics) === null || _saveResult$epics === void 0 ? void 0 : _saveResult$epics.length) || 0,\n              tasks: ((_saveResult$tasks = saveResult.tasks) === null || _saveResult$tasks === void 0 ? void 0 : _saveResult$tasks.length) || 0\n            });\n          } else {\n            console.error('❌ Erro ao salvar conteúdo:', saveResult.errors);\n          }\n        } catch (contentError) {\n          console.error('❌ Erro ao salvar conteúdo gerado:', contentError);\n        }\n      }\n    } catch (error) {\n      console.error('Erro crítico ao processar projeto:', error);\n    }\n    console.log('Projeto criado com sucesso:', savedProject);\n\n    // Navegar automaticamente para a página do projeto após criação\n    setTimeout(() => {\n      window.location.href = '/projetos';\n    }, 1000); // Pequeno delay para permitir que o usuário veja a confirmação\n  };\n\n  // Authentication handlers\n  const handleLoginSuccess = authUser => {\n    setUser(authUser);\n    setIsAuthenticated(true);\n  };\n\n  // Login Screen - Only show when not authenticated (exclusive page)\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLoginSuccess: handleLoginSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Component that uses navigation hooks\n  const AppWithNavigation = () => {\n    _s();\n    const navigate = useNavigate();\n    const handleProjectSelectedWithNav = (project, contentType) => {\n      console.log('App: handleProjectSelectedWithNav called', {\n        project: project.name,\n        contentType\n      });\n      if (contentType) {\n        console.log('App: setting selected project content');\n        // Set the selected project content to show in the current page\n        setSelectedProjectContent({\n          project,\n          contentType\n        });\n        setSelectedProject(null); // Clear selected project since we have content\n\n        // Navigate based on content type\n        switch (contentType) {\n          case 'pr':\n            // Navigate to projects page to show PR content\n            navigate('/projetos');\n            break;\n          case 'tasks':\n            // Navigate to projects page to show tasks content\n            navigate('/projetos');\n            break;\n          case 'flowchart':\n            // Stay on projects page to show flowchart content\n            navigate('/projetos');\n            break;\n          default:\n            navigate('/projetos');\n            break;\n        }\n      } else {\n        console.log('App: setting selected project (no content type)');\n        // Just set the selected project - this will show the content selection screen\n        setSelectedProject(project);\n        setSelectedProjectContent(null); // Clear any previous content selection\n        navigate('/projetos');\n      }\n    };\n    const handleCreateNewProjectWithNav = () => {\n      navigate('/');\n    };\n    return /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(HomePage, {\n            user: user,\n            currentProject: currentProject,\n            currentSession: currentSession,\n            onStartSession: handleStartSession,\n            onCreateProject: handleCreateProject,\n            onProjectCreated: handleProjectCreated,\n            onUpdateSession: handleUpdateSession,\n            onCreateNewProject: handleCreateNewProjectWithNav,\n            onProjectSelected: handleProjectSelectedWithNav\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/projetos\",\n          element: /*#__PURE__*/_jsxDEV(ProjectsPage, {\n            user: user,\n            onProjectSelected: handleProjectSelectedWithNav,\n            onCreateNewProject: handleCreateNewProjectWithNav,\n            selectedProject: selectedProject,\n            selectedProjectContent: selectedProjectContent,\n            onBack: () => {\n              console.log('App: onBack called');\n              if (selectedProjectContent) {\n                console.log('App: clearing selectedProjectContent');\n                setSelectedProjectContent(null);\n              } else if (selectedProject) {\n                console.log('App: clearing selectedProject');\n                setSelectedProject(null);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/fluxogramas\",\n          element: /*#__PURE__*/_jsxDEV(FlowchartsPage, {\n            user: user,\n            onProjectSelected: handleProjectSelectedWithNav\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/configuracoes\",\n          element: /*#__PURE__*/_jsxDEV(SettingsPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this);\n  };\n  _s(AppWithNavigation, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n    return [useNavigate];\n  });\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(AppWithNavigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"Wtz19uQuwI7K7WLHhfcmWGQGwTg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","Navigate","useNavigate","LoginPage","projects","saveGeneratedContent","HomePage","ProjectsPage","FlowchartsPage","SettingsPage","MainLayout","jsxDEV","_jsxDEV","App","_s2","_s","$RefreshSig$","user","setUser","isAuthenticated","setIsAuthenticated","currentProject","setCurrentProject","selectedProject","setSelectedProject","selectedProjectContent","setSelectedProjectContent","currentSession","setCurrentSession","handleStartSession","newSession","id","Date","now","title","description","status","currentStep","documents","videos","supportMaterials","tasks","name","type","content","isDefault","createdAt","updatedAt","flowchart","pr","handleUpdateSession","session","handleCreateProject","projectName","mode","newProject","user_id","created_at","toISOString","updated_at","console","log","handleProjectCreated","project","scope","savedProject","data","dbProject","error","create","generatedContent","nodes","edges","epics","saveResult","savePR","saveFlowchart","saveTasks","success","_saveResult$epics","_saveResult$tasks","length","errors","contentError","setTimeout","window","location","href","handleLoginSuccess","authUser","onLoginSuccess","fileName","_jsxFileName","lineNumber","columnNumber","AppWithNavigation","navigate","handleProjectSelectedWithNav","contentType","handleCreateNewProjectWithNav","children","path","element","onStartSession","onCreateProject","onProjectCreated","onUpdateSession","onCreateNewProject","onProjectSelected","onBack","to","replace","_c","$RefreshReg$"],"sources":["/Users/matheuspina/Desktop/briefy-new/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from 'react-router-dom';\nimport { LoginPage } from './components/LoginPage';\nimport { ProcessingSession } from './types';\nimport { Project, projects } from './lib/supabase';\nimport { saveGeneratedContent } from './services/projectContentService';\nimport { HomePage, ProjectsPage, FlowchartsPage, SettingsPage } from './pages';\nimport { MainLayout } from './layouts';\n\nfunction App() {\n  // Authentication states\n  const [user, setUser] = useState<any>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Project states\n  const [currentProject, setCurrentProject] = useState<Project | null>(null);\n  const [selectedProject, setSelectedProject] = useState<Project | null>(null);\n  const [selectedProjectContent, setSelectedProjectContent] = useState<{\n    project: Project;\n    contentType: 'pr' | 'tasks' | 'flowchart';\n  } | null>(null);\n\n  // New states for advanced features\n  const [currentSession, setCurrentSession] = useState<ProcessingSession | null>(null);\n\n\n\n  // New handlers for advanced features\n  const handleStartSession = () => {\n    const newSession: ProcessingSession = {\n      id: `session-${Date.now()}`,\n      title: 'Nova Sessão de Processamento',\n      description: 'Sessão criada automaticamente',\n      status: 'preparing',\n      currentStep: 'Preparação do Material',\n      documents: [],\n      videos: [],\n      supportMaterials: {\n        tasks: {\n          id: 'default-tasks',\n          name: 'Material de Apoio - Tasks',\n          type: 'tasks',\n          content: 'Material padrão para geração de tasks',\n          isDefault: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        flowchart: {\n          id: 'default-flowchart',\n          name: 'Material de Apoio - Fluxograma',\n          type: 'flowchart',\n          content: 'Material padrão para geração de fluxograma',\n          isDefault: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        pr: {\n          id: 'default-pr',\n          name: 'Material de Apoio - PR',\n          type: 'pr',\n          content: 'Material padrão para geração de PR',\n          isDefault: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    setCurrentSession(newSession);\n  };\n\n  const handleUpdateSession = (session: ProcessingSession) => {\n    setCurrentSession(session);\n  };\n\n  // Project handlers\n  const handleCreateProject = (projectName: string, mode: 'briefy' | 'manual') => {\n    const newProject: Project = {\n      id: `project-${Date.now()}`,\n      name: projectName,\n      description: `Projeto criado via ${mode === 'briefy' ? 'Briefy' : 'Manual'}`,\n      user_id: user?.id || 'current-user',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    setCurrentProject(newProject);\n    console.log(`Projeto criado: ${projectName} no modo ${mode}`);\n  };\n\n  const handleProjectCreated = async (project: Project, scope: any) => {\n    console.log('Projeto sendo processado:', project);\n    console.log('Dados do scope:', scope);\n\n    let savedProject = project;\n\n    try {\n      // Salvar o projeto no banco de dados primeiro\n      const { data: dbProject, error } = await projects.create(project.name, project.description);\n\n      if (error) {\n        console.error('Erro ao salvar projeto no banco:', error);\n        // Mesmo com erro, continuar com o fluxo para não bloquear o usuário\n      } else {\n        console.log('Projeto salvo no banco:', dbProject);\n        savedProject = dbProject;\n        setCurrentProject(dbProject);\n      }\n\n      // Salvar o conteúdo gerado (PR, fluxograma, tasks) no banco\n      if (scope && savedProject) {\n        try {\n          console.log('Salvando conteúdo gerado no banco...');\n\n          // Preparar dados no formato esperado pelo saveGeneratedContent\n          const generatedContent = {\n            pr: scope.pr || '',\n            flowchart: scope.flowchart || { nodes: [], edges: [] },\n            epics: scope.epics || [],\n            tasks: scope.tasks || []\n          };\n\n          const saveResult = await saveGeneratedContent(savedProject.id, generatedContent, {\n            savePR: true,\n            saveFlowchart: true,\n            saveTasks: true\n          });\n\n          if (saveResult.success) {\n            console.log('✅ Conteúdo salvo com sucesso:', {\n              pr: !!saveResult.pr,\n              flowchart: !!saveResult.flowchart,\n              epics: saveResult.epics?.length || 0,\n              tasks: saveResult.tasks?.length || 0\n            });\n          } else {\n            console.error('❌ Erro ao salvar conteúdo:', saveResult.errors);\n          }\n        } catch (contentError) {\n          console.error('❌ Erro ao salvar conteúdo gerado:', contentError);\n        }\n      }\n\n    } catch (error) {\n      console.error('Erro crítico ao processar projeto:', error);\n    }\n\n    console.log('Projeto criado com sucesso:', savedProject);\n\n    // Navegar automaticamente para a página do projeto após criação\n    setTimeout(() => {\n      window.location.href = '/projetos';\n    }, 1000); // Pequeno delay para permitir que o usuário veja a confirmação\n  };\n\n\n\n\n\n  // Authentication handlers\n  const handleLoginSuccess = (authUser: any) => {\n    setUser(authUser);\n    setIsAuthenticated(true);\n  };\n\n  // Login Screen - Only show when not authenticated (exclusive page)\n  if (!isAuthenticated) {\n    return <LoginPage onLoginSuccess={handleLoginSuccess} />;\n  }\n\n  // Component that uses navigation hooks\n  const AppWithNavigation = () => {\n    const navigate = useNavigate();\n\n    const handleProjectSelectedWithNav = (project: Project, contentType?: 'pr' | 'tasks' | 'flowchart') => {\n      console.log('App: handleProjectSelectedWithNav called', { project: project.name, contentType });\n\n      if (contentType) {\n        console.log('App: setting selected project content');\n        // Set the selected project content to show in the current page\n        setSelectedProjectContent({ project, contentType });\n        setSelectedProject(null); // Clear selected project since we have content\n\n        // Navigate based on content type\n        switch (contentType) {\n          case 'pr':\n            // Navigate to projects page to show PR content\n            navigate('/projetos');\n            break;\n          case 'tasks':\n            // Navigate to projects page to show tasks content\n            navigate('/projetos');\n            break;\n          case 'flowchart':\n            // Stay on projects page to show flowchart content\n            navigate('/projetos');\n            break;\n          default:\n            navigate('/projetos');\n            break;\n        }\n      } else {\n        console.log('App: setting selected project (no content type)');\n        // Just set the selected project - this will show the content selection screen\n        setSelectedProject(project);\n        setSelectedProjectContent(null); // Clear any previous content selection\n        navigate('/projetos');\n      }\n    };\n\n    const handleCreateNewProjectWithNav = () => {\n      navigate('/');\n    };\n\n    return (\n      <MainLayout>\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <HomePage\n                user={user}\n                currentProject={currentProject}\n                currentSession={currentSession}\n                onStartSession={handleStartSession}\n                onCreateProject={handleCreateProject}\n                onProjectCreated={handleProjectCreated}\n                onUpdateSession={handleUpdateSession}\n                onCreateNewProject={handleCreateNewProjectWithNav}\n                onProjectSelected={handleProjectSelectedWithNav}\n              />\n            }\n          />\n\n          <Route\n            path=\"/projetos\"\n            element={\n              <ProjectsPage\n                user={user}\n                onProjectSelected={handleProjectSelectedWithNav}\n                onCreateNewProject={handleCreateNewProjectWithNav}\n                selectedProject={selectedProject}\n                selectedProjectContent={selectedProjectContent}\n                onBack={() => {\n                  console.log('App: onBack called');\n                  if (selectedProjectContent) {\n                    console.log('App: clearing selectedProjectContent');\n                    setSelectedProjectContent(null);\n                  } else if (selectedProject) {\n                    console.log('App: clearing selectedProject');\n                    setSelectedProject(null);\n                  }\n                }}\n              />\n            }\n          />\n\n          <Route\n            path=\"/fluxogramas\"\n            element={\n              <FlowchartsPage\n                user={user}\n                onProjectSelected={handleProjectSelectedWithNav}\n              />\n            }\n          />\n\n          <Route\n            path=\"/configuracoes\"\n            element={<SettingsPage />}\n          />\n\n          {/* Redirect to home for any unknown routes */}\n          <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n        </Routes>\n      </MainLayout>\n    );\n  };\n\n  return (\n    <Router>\n      <AppWithNavigation />\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}