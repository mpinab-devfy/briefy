{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('❌ Supabase configuration missing!');\n  console.error('📝 Please add the following to your .env file:');\n  console.error('   REACT_APP_SUPABASE_URL=your_supabase_project_url');\n  console.error('   REACT_APP_SUPABASE_ANON_KEY=your_supabase_anon_key');\n  console.error('🔗 Get these from your Supabase project settings');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n});\n\n// Tipos para autenticação\n\n// Tipos para projetos\n\n// Tipos para materiais de apoio\n\n// Tipos para extrações de vídeo\n\n// Tipos para análises IA\n\n// Tipos para épicos\n\n// Tipos para tasks\n\n// Tipos para prompts globais\n\n// Tipos para fluxogramas\n\n// Tipos para PRs\n\n// Funções auxiliares para autenticação\nexport const auth = {\n  signUp: async (email, password, name) => {\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          name: name || email.split('@')[0]\n        }\n      }\n    });\n    return {\n      data,\n      error\n    };\n  },\n  signIn: async (email, password) => {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    return {\n      data,\n      error\n    };\n  },\n  signOut: async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    return {\n      error\n    };\n  },\n  getCurrentUser: async () => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    return user;\n  },\n  onAuthStateChange: callback => {\n    return supabase.auth.onAuthStateChange(callback);\n  }\n};\n\n// Funções para projetos\nexport const projects = {\n  create: async (name, description) => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n    const {\n      data,\n      error\n    } = await supabase.from('projects').insert({\n      name,\n      description,\n      user_id: user.id\n    }).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  list: async () => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n    const {\n      data,\n      error\n    } = await supabase.from('projects').select('*').eq('user_id', user.id).neq('is_system', true).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  get: async id => {\n    const {\n      data,\n      error\n    } = await supabase.from('projects').select('*').eq('id', id).neq('is_system', true).single();\n    return {\n      data,\n      error\n    };\n  },\n  update: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('projects').update(updates).eq('id', id).neq('is_system', true).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  delete: async id => {\n    const {\n      error\n    } = await supabase.from('projects').delete().eq('id', id).neq('is_system', true);\n    return {\n      error\n    };\n  }\n};\n\n// Funções para materiais de apoio\nexport const supportMaterials = {\n  create: async material => {\n    const {\n      data,\n      error\n    } = await supabase.from('support_materials').insert(material).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  list: async projectId => {\n    const {\n      data,\n      error\n    } = await supabase.from('support_materials').select('*').eq('project_id', projectId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  update: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('support_materials').update(updates).eq('id', id).select().single();\n    return {\n      data,\n      error\n    };\n  }\n};\n\n// Funções para extrações de vídeo\nexport const videoExtractions = {\n  create: async extraction => {\n    const {\n      data,\n      error\n    } = await supabase.from('video_extractions').insert(extraction).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  list: async projectId => {\n    const {\n      data,\n      error\n    } = await supabase.from('video_extractions').select('*').eq('project_id', projectId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  }\n};\n\n// Funções para análises IA\nexport const aiAnalyses = {\n  create: async analysis => {\n    const {\n      data,\n      error\n    } = await supabase.from('ai_analyses').insert(analysis).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  list: async projectId => {\n    const {\n      data,\n      error\n    } = await supabase.from('ai_analyses').select('*').eq('project_id', projectId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  }\n};\n\n// Funções para épicos\nexport const epics = {\n  create: async epic => {\n    const {\n      data,\n      error\n    } = await supabase.from('epics').insert(epic).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  list: async projectId => {\n    const {\n      data,\n      error\n    } = await supabase.from('epics').select('*').eq('project_id', projectId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  update: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('epics').update(updates).eq('id', id).select().single();\n    return {\n      data,\n      error\n    };\n  }\n};\n\n// Funções para tasks\nexport const tasks = {\n  create: async task => {\n    const {\n      data,\n      error\n    } = await supabase.from('tasks').insert(task).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  list: async projectId => {\n    const {\n      data,\n      error\n    } = await supabase.from('tasks').select('*').eq('project_id', projectId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  update: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('tasks').update(updates).eq('id', id).select().single();\n    return {\n      data,\n      error\n    };\n  }\n};\n\n// Funções para fluxogramas\nexport const flowcharts = {\n  create: async flowchart => {\n    const {\n      data,\n      error\n    } = await supabase.from('flowcharts').insert(flowchart).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  list: async projectId => {\n    const {\n      data,\n      error\n    } = await supabase.from('flowcharts').select('*').eq('project_id', projectId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  update: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('flowcharts').update(updates).eq('id', id).select().single();\n    return {\n      data,\n      error\n    };\n  }\n};\n\n// Funções para PRs\nexport const pullRequests = {\n  create: async pr => {\n    const {\n      data,\n      error\n    } = await supabase.from('pull_requests').insert(pr).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  list: async projectId => {\n    const {\n      data,\n      error\n    } = await supabase.from('pull_requests').select('*').eq('project_id', projectId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  update: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('pull_requests').update(updates).eq('id', id).select().single();\n    return {\n      data,\n      error\n    };\n  }\n};\n\n// Funções para prompts globais\nexport const globalPrompts = {\n  create: async data => {\n    const {\n      data: result,\n      error\n    } = await supabase.from('global_prompts').insert(data).select().single();\n    return {\n      data: result,\n      error\n    };\n  },\n  list: async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('global_prompts').select('*').order('type');\n    return {\n      data,\n      error\n    };\n  },\n  update: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('global_prompts').update({\n      ...updates,\n      updated_at: new Date().toISOString()\n    }).eq('id', id).select().single();\n    return {\n      data,\n      error\n    };\n  },\n  delete: async id => {\n    const {\n      error\n    } = await supabase.from('global_prompts').delete().eq('id', id);\n    return {\n      error\n    };\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","console","error","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","signUp","email","password","name","data","options","split","signIn","signInWithPassword","signOut","getCurrentUser","user","getUser","onAuthStateChange","callback","projects","create","description","Error","from","insert","user_id","id","select","single","list","eq","neq","order","ascending","get","update","updates","delete","supportMaterials","material","projectId","videoExtractions","extraction","aiAnalyses","analysis","epics","epic","tasks","task","flowcharts","flowchart","pullRequests","pr","globalPrompts","result","updated_at","Date","toISOString"],"sources":["/Users/matheuspina/Desktop/briefy-new/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('❌ Supabase configuration missing!');\n  console.error('📝 Please add the following to your .env file:');\n  console.error('   REACT_APP_SUPABASE_URL=your_supabase_project_url');\n  console.error('   REACT_APP_SUPABASE_ANON_KEY=your_supabase_anon_key');\n  console.error('🔗 Get these from your Supabase project settings');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n});\n\n// Tipos para autenticação\nexport interface User {\n  id: string;\n  email: string;\n  name?: string;\n  avatar_url?: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Tipos para projetos\nexport interface Project {\n  id: string;\n  name: string;\n  description: string;\n  user_id: string;\n  created_at: string;\n  updated_at: string;\n  is_system?: boolean;\n}\n\n// Tipos para materiais de apoio\nexport interface SupportMaterialDB {\n  id: string;\n  name: string;\n  type: 'tasks' | 'flowchart' | 'pr';\n  content: string;\n  is_default: boolean;\n  project_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Tipos para extrações de vídeo\nexport interface VideoExtraction {\n  id: string;\n  file_name: string;\n  extracted_text: string;\n  transcription: string;\n  duration?: number;\n  thumbnail_url?: string;\n  analysis_data: any;\n  project_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Tipos para análises IA\nexport interface AIAnalysis {\n  id: string;\n  title: string;\n  content: string;\n  analysis_type: 'document' | 'video' | 'combined';\n  project_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Tipos para épicos\nexport interface Epic {\n  id: string;\n  title: string;\n  description?: string;\n  priority: 'low' | 'medium' | 'high';\n  status: 'pending' | 'in_progress' | 'completed';\n  project_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Tipos para tasks\nexport interface Task {\n  id: string;\n  title: string;\n  description?: string;\n  story_points: number;\n  status: 'pending' | 'approved' | 'rejected';\n  category?: string;\n  epic_id?: string;\n  project_id: string;\n  criteria?: string[];\n  created_at: string;\n  updated_at: string;\n}\n\n// Tipos para prompts globais\nexport interface GlobalPrompt {\n  id: string;\n  type: 'pr' | 'flowchart' | 'tasks';\n  title: string;\n  content: string;\n  is_default: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\n// Tipos para fluxogramas\nexport interface Flowchart {\n  id: string;\n  title: string;\n  description: string;\n  nodes: any[];\n  edges: any[];\n  project_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Tipos para PRs\nexport interface PullRequest {\n  id: string;\n  title: string;\n  description: string;\n  content: string;\n  status: 'draft' | 'pending' | 'approved' | 'merged';\n  project_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Funções auxiliares para autenticação\nexport const auth = {\n  signUp: async (email: string, password: string, name?: string) => {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          name: name || email.split('@')[0]\n        }\n      }\n    });\n    return { data, error };\n  },\n\n  signIn: async (email: string, password: string) => {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    return { data, error };\n  },\n\n  signOut: async () => {\n    const { error } = await supabase.auth.signOut();\n    return { error };\n  },\n\n  getCurrentUser: async () => {\n    const { data: { user } } = await supabase.auth.getUser();\n    return user;\n  },\n\n  onAuthStateChange: (callback: (event: string, session: any) => void) => {\n    return supabase.auth.onAuthStateChange(callback);\n  }\n};\n\n// Funções para projetos\nexport const projects = {\n  create: async (name: string, description: string) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const { data, error } = await supabase\n      .from('projects')\n      .insert({\n        name,\n        description,\n        user_id: user.id\n      })\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  list: async () => {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const { data, error } = await supabase\n      .from('projects')\n      .select('*')\n      .eq('user_id', user.id)\n      .neq('is_system', true)\n      .order('created_at', { ascending: false });\n\n    return { data, error };\n  },\n\n  get: async (id: string) => {\n    const { data, error } = await supabase\n      .from('projects')\n      .select('*')\n      .eq('id', id)\n      .neq('is_system', true)\n      .single();\n\n    return { data, error };\n  },\n\n  update: async (id: string, updates: Partial<Project>) => {\n    const { data, error } = await supabase\n      .from('projects')\n      .update(updates)\n      .eq('id', id)\n      .neq('is_system', true)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  delete: async (id: string) => {\n    const { error } = await supabase\n      .from('projects')\n      .delete()\n      .eq('id', id)\n      .neq('is_system', true);\n\n    return { error };\n  }\n};\n\n// Funções para materiais de apoio\nexport const supportMaterials = {\n  create: async (material: Omit<SupportMaterialDB, 'id' | 'created_at' | 'updated_at'>) => {\n    const { data, error } = await supabase\n      .from('support_materials')\n      .insert(material)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  list: async (projectId: string) => {\n    const { data, error } = await supabase\n      .from('support_materials')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    return { data, error };\n  },\n\n  update: async (id: string, updates: Partial<SupportMaterialDB>) => {\n    const { data, error } = await supabase\n      .from('support_materials')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    return { data, error };\n  }\n};\n\n// Funções para extrações de vídeo\nexport const videoExtractions = {\n  create: async (extraction: Omit<VideoExtraction, 'id' | 'created_at' | 'updated_at'>) => {\n    const { data, error } = await supabase\n      .from('video_extractions')\n      .insert(extraction)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  list: async (projectId: string) => {\n    const { data, error } = await supabase\n      .from('video_extractions')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    return { data, error };\n  }\n};\n\n// Funções para análises IA\nexport const aiAnalyses = {\n  create: async (analysis: Omit<AIAnalysis, 'id' | 'created_at' | 'updated_at'>) => {\n    const { data, error } = await supabase\n      .from('ai_analyses')\n      .insert(analysis)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  list: async (projectId: string) => {\n    const { data, error } = await supabase\n      .from('ai_analyses')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    return { data, error };\n  }\n};\n\n// Funções para épicos\nexport const epics = {\n  create: async (epic: Omit<Epic, 'id' | 'created_at' | 'updated_at'>) => {\n    const { data, error } = await supabase\n      .from('epics')\n      .insert(epic)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  list: async (projectId: string) => {\n    const { data, error } = await supabase\n      .from('epics')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    return { data, error };\n  },\n\n  update: async (id: string, updates: Partial<Epic>) => {\n    const { data, error } = await supabase\n      .from('epics')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    return { data, error };\n  }\n};\n\n// Funções para tasks\nexport const tasks = {\n  create: async (task: Omit<Task, 'id' | 'created_at' | 'updated_at'>) => {\n    const { data, error } = await supabase\n      .from('tasks')\n      .insert(task)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  list: async (projectId: string) => {\n    const { data, error } = await supabase\n      .from('tasks')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    return { data, error };\n  },\n\n  update: async (id: string, updates: Partial<Task>) => {\n    const { data, error } = await supabase\n      .from('tasks')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    return { data, error };\n  }\n};\n\n// Funções para fluxogramas\nexport const flowcharts = {\n  create: async (flowchart: Omit<Flowchart, 'id' | 'created_at' | 'updated_at'>) => {\n    const { data, error } = await supabase\n      .from('flowcharts')\n      .insert(flowchart)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  list: async (projectId: string) => {\n    const { data, error } = await supabase\n      .from('flowcharts')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    return { data, error };\n  },\n\n  update: async (id: string, updates: Partial<Flowchart>) => {\n    const { data, error } = await supabase\n      .from('flowcharts')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    return { data, error };\n  }\n};\n\n// Funções para PRs\nexport const pullRequests = {\n  create: async (pr: Omit<PullRequest, 'id' | 'created_at' | 'updated_at'>) => {\n    const { data, error } = await supabase\n      .from('pull_requests')\n      .insert(pr)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  list: async (projectId: string) => {\n    const { data, error } = await supabase\n      .from('pull_requests')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    return { data, error };\n  },\n\n  update: async (id: string, updates: Partial<PullRequest>) => {\n    const { data, error } = await supabase\n      .from('pull_requests')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    return { data, error };\n  }\n};\n\n// Funções para prompts globais\nexport const globalPrompts = {\n  create: async (data: Omit<GlobalPrompt, 'id' | 'created_at' | 'updated_at'>) => {\n    const { data: result, error } = await supabase\n      .from('global_prompts')\n      .insert(data)\n      .select()\n      .single();\n\n    return { data: result, error };\n  },\n\n  list: async () => {\n    const { data, error } = await supabase\n      .from('global_prompts')\n      .select('*')\n      .order('type');\n\n    return { data, error };\n  },\n\n  update: async (id: string, updates: Partial<GlobalPrompt>) => {\n    const { data, error } = await supabase\n      .from('global_prompts')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    return { data, error };\n  },\n\n  delete: async (id: string) => {\n    const { error } = await supabase\n      .from('global_prompts')\n      .delete()\n      .eq('id', id);\n\n    return { error };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}