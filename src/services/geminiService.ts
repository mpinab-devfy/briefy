/**
 * ARQUITETURA DE PROMPTS - IMPORTANTE
 *
 * 1. DEFAULT_PROMPTS (hardcoded): Cont√©m instru√ß√µes t√©cnicas sobre:
 *    - Como a IA deve se comportar (papel/fun√ß√£o)
 *    - Formato de resposta esperado (JSON, texto, etc.)
 *    - Estrutura de dados obrigat√≥ria
 *    - Regras de parsing e valida√ß√£o
 *
 * 2. PROMPTS GLOBAIS (banco de dados): Devem conter APENAS:
 *    - Contexto espec√≠fico do dom√≠nio/neg√≥cio
 *    - Informa√ß√µes contextuais adicionais
 *    - Prefer√™ncias espec√≠ficas do cliente/usu√°rio
 *    - NUNCA instru√ß√µes t√©cnicas sobre formato de resposta
 *
 *    EXEMPLOS de prompts globais (APENAS contexto):
 *    - "Este √© um sistema de e-commerce para vendas online"
 *    - "Cliente trabalha com gest√£o de cl√≠nicas m√©dicas"
 *    - "Priorizar seguran√ßa e conformidade com LGPD"
 *    - "Sistema deve ser compat√≠vel com dispositivos m√≥veis"
 *
 * 3. CONTE√öDO DIN√ÇMICO:
 *    - Conte√∫do dos documentos do projeto
 *    - Informa√ß√µes adicionais fornecidas pelo usu√°rio
 *
 * Combina√ß√£o final: Instru√ß√µes T√©cnicas + Contexto Espec√≠fico + Conte√∫do do Projeto
 */

import { GoogleGenerativeAI } from '@google/generative-ai';
import { DocumentFile, ProjectScope } from '../types';
import { supabase } from '../lib/supabase';
import { supportMaterials } from '../lib/supabase';

// Configura√ß√£o da API key do Gemini
const API_KEY = process.env.REACT_APP_GEMINI_API_KEY || '';

if (!API_KEY) {
  console.error('‚ùå REACT_APP_GEMINI_API_KEY n√£o configurada no arquivo .env');
  console.error('üìù Para configurar: crie um arquivo .env na raiz do projeto com:');
  console.error('   REACT_APP_GEMINI_API_KEY=sua_api_key_aqui');
  console.error('üîë Obtenha sua API key em: https://makersuite.google.com/app/apikey');
}

let genAI: GoogleGenerativeAI;
try {
  genAI = new GoogleGenerativeAI(API_KEY);
} catch (error) {
  console.error('‚ùå Erro ao inicializar GoogleGenerativeAI:', error);
}

// Prompts padr√£o (fallback)
const DEFAULT_PROMPTS = {
  pr: `Voc√™ √© um especialista em an√°lise de requisitos e cria√ß√£o de documentos t√©cnicos.
Com base nos documentos fornecidos, gere um DOCUMENTO T√âCNICO DETALHADO (PR) incluindo:
- Vis√£o geral do projeto
- Objetivos e metas
- Arquitetura proposta
- Tecnologias e ferramentas
- Estimativa de esfor√ßo
- Riscos identificados
- Prazos estimados
- Or√ßamento aproximado

Retorne apenas o texto do documento t√©cnico, sem formata√ß√£o JSON.`,

  flowchart: `Voc√™ √© um especialista em modelagem de processos e cria√ß√£o de fluxogramas t√©cnicos.
Com base nos documentos fornecidos, gere um FLUXOGRAMA em formato JSON v√°lido que represente o fluxo completo do projeto/processo.

**INSTRU√á√ïES IMPORTANTES:**

1. **AN√ÅLISE DO PROCESSO**: Identifique as etapas principais do processo, pontos de decis√£o, entradas e sa√≠das.

2. **CRIA√á√ÉO DE N√ìS**:
   - **input**: Pontos de entrada, in√≠cio do processo
   - **process**: Atividades, tarefas, processamento de dados
   - **output**: Resultados, fim do processo
   - **decision**: Pontos de decis√£o com ramifica√ß√µes (sim/n√£o)

3. **POSICIONAMENTO**: Distribua os n√≥s de forma l√≥gica no diagrama:
   - Fluxo de cima para baixo ou esquerda para direita
   - Agrupe n√≥s relacionados
   - Mantenha dist√¢ncia adequada entre n√≥s

4. **CONEX√ïES**: Cada edge deve conectar exatamente 2 n√≥s existentes.

**ESTRUTURA OBRIGAT√ìRIA**: Retorne APENAS um JSON v√°lido (sem texto adicional):

{
  "nodes": [
    {
      "id": "string_unico",
      "type": "input|process|output|decision",
      "label": "Descri√ß√£o clara e concisa do n√≥",
      "position": {"x": number, "y": number}
    }
  ],
  "edges": [
    {
      "id": "edge_string_unico",
      "source": "id_do_no_origem",
      "target": "id_do_no_destino",
      "label": "r√≥tulo_opcional_da_conexao"
    }
  ]
}

**EXEMPLO DE FLUXOGRAMA BEM ESTRUTURADO:**

{
  "nodes": [
    {"id": "start", "type": "input", "label": "In√≠cio do Processo", "position": {"x": 100, "y": 100}},
    {"id": "login", "type": "process", "label": "Processar Login", "position": {"x": 300, "y": 100}},
    {"id": "auth_check", "type": "decision", "label": "Credenciais V√°lidas?", "position": {"x": 500, "y": 100}},
    {"id": "dashboard", "type": "process", "label": "Carregar Dashboard", "position": {"x": 300, "y": 300}},
    {"id": "error", "type": "output", "label": "Mostrar Erro", "position": {"x": 700, "y": 100}},
    {"id": "logout", "type": "output", "label": "Logout do Sistema", "position": {"x": 500, "y": 300}}
  ],
  "edges": [
    {"id": "e1", "source": "start", "target": "login"},
    {"id": "e2", "source": "login", "target": "auth_check"},
    {"id": "e3", "source": "auth_check", "target": "dashboard", "label": "Sim"},
    {"id": "e4", "source": "auth_check", "target": "error", "label": "N√£o"},
    {"id": "e5", "source": "dashboard", "target": "logout"}
  ]
}

**REGRAS IMPORTANTES:**
- Use IDs √∫nicos para todos os n√≥s e edges
- Todas as conex√µes devem referenciar IDs existentes
- Posi√ß√µes devem formar um layout l√≥gico e leg√≠vel
- Labels devem ser concisos mas descritivos
- Certifique-se de que o JSON seja v√°lido e parse√°vel`,

  tasks: `Voc√™ √© um especialista em gerenciamento de projetos √°geis e cria√ß√£o de tarefas detalhadas.
Com base nos documentos fornecidos, analise o projeto e crie uma estrutura completa de √âPICOS e TASKS seguindo as melhores pr√°ticas √°geis.

**INSTRU√á√ïES IMPORTANTES:**

1. **AN√ÅLISE DO PROJETO**: Primeiro, identifique os principais m√≥dulos/componentes do sistema e funcionalidades principais.

2. **CRIA√á√ÉO DE √âPICOS**: Cada √©pico deve representar uma funcionalidade ou m√≥dulo principal do sistema.
   - Use nomes descritivos e objetivos
   - Inclua descri√ß√£o detalhada do que o √©pico abrange
   - Defina prioridade baseada na criticidade para o neg√≥cio

3. **CRIA√á√ÉO DE TASKS**: Para cada √©pico, crie tasks espec√≠ficas e mensur√°veis.
   - Cada task deve ter um objetivo claro e espec√≠fico
   - Use verbos de a√ß√£o no t√≠tulo (Implementar, Criar, Configurar, etc.)
   - Defina story points realistas baseados na complexidade
   - Categorize corretamente por tipo de trabalho
   - Inclua crit√©rios de aceite espec√≠ficos e test√°veis

4. **ESTRUTURA OBRIGAT√ìRIA**: Retorne APENAS um JSON v√°lido com esta estrutura:

{
  "epics": [
    {
      "title": "Nome descritivo do √©pico",
      "description": "Descri√ß√£o detalhada do que este √©pico abrange, incluindo objetivos e contexto",
      "priority": "high|medium|low"
    }
  ],
  "tasks": [
    {
      "title": "Verbo + Objetivo espec√≠fico da task",
      "description": "Descri√ß√£o detalhada do que deve ser implementado, incluindo contexto e depend√™ncias",
      "story_points": 1|2|3|5|8|13,
      "category": "frontend|backend|design|testing|devops|database|security|documentation|infrastructure|mobile|api",
      "epic_index": 0,
      "acceptance_criteria": [
        "Crit√©rio espec√≠fico e test√°vel 1",
        "Crit√©rio espec√≠fico e test√°vel 2",
        "Crit√©rio espec√≠fico e test√°vel 3"
      ],
      "priority": "high|medium|low",
      "estimated_hours": 2|4|8|16|24|40
    }
  ]
}

**DIRETRIZES PARA STORY POINTS:**
- 1: Tarefa muito simples, poucos minutos
- 2: Tarefa simples, at√© 2 horas
- 3: Tarefa m√©dia, at√© 4 horas
- 5: Tarefa complexa, at√© 8 horas
- 8: Tarefa muito complexa, at√© 16 horas
- 13: Tarefa extremamente complexa, at√© 24+ horas

**CATEGORIAS DISPON√çVEIS:**
- frontend: Interface do usu√°rio, componentes React/Vue/Angular
- backend: APIs, l√≥gica de neg√≥cio, servi√ßos
- design: UI/UX, prot√≥tipos, wireframes
- testing: Testes unit√°rios, integra√ß√£o, e2e
- devops: CI/CD, infraestrutura, deploy
- database: Modelagem, migrations, otimiza√ß√£o
- security: Autentica√ß√£o, autoriza√ß√£o, criptografia
- documentation: Documenta√ß√£o t√©cnica e de usu√°rio
- infrastructure: Servidores, redes, configura√ß√£o
- mobile: Apps mobile, responsividade
- api: Integra√ß√µes, webhooks, APIs externas

**EXEMPLO DE TASK BEM ESTRUTURADA:**
{
  "title": "Implementar sistema de autentica√ß√£o OAuth2",
  "description": "Criar sistema completo de login usando Google OAuth2, incluindo middleware, valida√ß√£o de tokens e refresh tokens",
  "story_points": 8,
  "category": "backend",
  "epic_index": 0,
  "acceptance_criteria": [
    "Usu√°rio pode fazer login com Google",
    "Token JWT √© gerado e validado corretamente",
    "Middleware de autentica√ß√£o protege rotas",
    "Refresh token funciona para renovar sess√£o",
    "Logout invalida tokens corretamente"
  ],
  "priority": "high",
  "estimated_hours": 16
}`
};

// Cache para prompts globais
let cachedPrompts: any = null;
let cacheTimestamp: number = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutos

// Fun√ß√£o para obter prompts globais do banco de dados
// NOTA: Os prompts globais devem conter APENAS contexto espec√≠fico do dom√≠nio/neg√≥cio
// Instru√ß√µes t√©cnicas sobre formato de resposta ficam nos DEFAULT_PROMPTS
export const getGlobalPrompts = async (): Promise<any> => {
  try {
    // Verificar cache
    const now = Date.now();
    if (cachedPrompts && (now - cacheTimestamp) < CACHE_DURATION) {
      return cachedPrompts;
    }

    // Buscar do banco de dados (apenas prompts ativos)
    const { data, error } = await supabase
      .from('global_prompts')
      .select('*')
      .eq('is_active', true);

    if (error && error.message.includes('relation "global_prompts" does not exist')) {
      // Usar prompts padr√£o se a tabela n√£o existir
      cachedPrompts = DEFAULT_PROMPTS;
      cacheTimestamp = now;
      return cachedPrompts;
    } else if (error) {
      console.error('Erro ao buscar prompts globais:', error);
      return DEFAULT_PROMPTS;
    }

    // Converter array para objeto - apenas contexto espec√≠fico, n√£o instru√ß√µes t√©cnicas
    const promptsObject: any = { ...DEFAULT_PROMPTS }
    if (data && Array.isArray(data)) {
      data.forEach(prompt => {
        if (prompt.type && prompt.content) {
          // Se o conte√∫do for diferente do padr√£o, assume que √© contexto espec√≠fico
          if (prompt.content !== DEFAULT_PROMPTS[prompt.type as keyof typeof DEFAULT_PROMPTS]) {
            promptsObject[prompt.type] = prompt.content;
          }
        }
      });
    }

    cachedPrompts = promptsObject;
    cacheTimestamp = now;
    return cachedPrompts;
  } catch (error) {
    console.error('Erro ao obter prompts globais:', error);
    return DEFAULT_PROMPTS;
  }
}

// Fun√ß√£o para invalidar cache de prompts
export const invalidatePromptsCache = () => {
  cachedPrompts = null;
  cacheTimestamp = 0;
}

// Fun√ß√£o para gerar prompt espec√≠fico baseado no tipo
// Fun√ß√£o para buscar materiais de apoio de um projeto
const getProjectSupportMaterials = async (projectId: string) => {
  try {
    console.log('üîç Buscando materiais de apoio do projeto:', projectId);

    // Primeiro tentar buscar materiais espec√≠ficos do projeto
    let { data, error } = await supportMaterials.list(projectId);

    // Se n√£o encontrar materiais espec√≠ficos, buscar materiais padr√£o/globais
    if (!data || data.length === 0) {
      console.log('‚ö†Ô∏è Nenhum material espec√≠fico encontrado, buscando materiais padr√£o...');
      const { data: defaultData, error: defaultError } = await supabase
        .from('support_materials')
        .select('*')
        .eq('is_default', true)
        .order('created_at', { ascending: false });

      if (!defaultError && defaultData && defaultData.length > 0) {
        console.log('‚úÖ Materiais padr√£o encontrados:', defaultData.length);
        data = defaultData;
      }
    }

    if (error) {
      console.error('‚ùå Erro ao buscar materiais de apoio:', error);
      return {};
    }

    // Organizar por tipo
    const materialsByType: any = {};
    (data || []).forEach(material => {
      materialsByType[material.type] = material.content;
      console.log(`üìÑ Material ${material.type} encontrado:`, material.content.substring(0, 100) + '...');
      console.log(`üìä Detalhes do material ${material.type}:`, {
        id: material.id,
        name: material.name,
        type: material.type,
        is_default: material.is_default,
        content_length: material.content.length
      });
    });

    console.log('‚úÖ Materiais de apoio encontrados:', Object.keys(materialsByType));
    console.log('üìã Resumo dos materiais por tipo:', Object.keys(materialsByType).map(type => ({
      type,
      length: materialsByType[type]?.length || 0
    })));
    return materialsByType;
  } catch (error) {
    console.error('‚ùå Erro ao buscar materiais de apoio:', error);
    return {};
  }
};

const generatePrompt = async (type: 'pr' | 'flowchart' | 'tasks', documentContent: string, additionalInfo: string, projectId?: string): Promise<string> => {
  const globalPrompts = await getGlobalPrompts();

  // Usar instru√ß√µes t√©cnicas do prompt hardcoded + contexto espec√≠fico do global
  const technicalInstructions = DEFAULT_PROMPTS[type];
  const domainContext = globalPrompts[type];

  // Combinar: instru√ß√µes t√©cnicas + contexto espec√≠fico + conte√∫do
  let finalPrompt = technicalInstructions;

  // Adicionar contexto espec√≠fico se existir e for diferente do padr√£o
  if (domainContext && domainContext !== technicalInstructions) {
    finalPrompt += `\n\n--- CONTEXTO ESPEC√çFICO DO DOM√çNIO ---\n${domainContext}`;
  }

  // Buscar e adicionar materiais de apoio se projectId for fornecido
  if (projectId) {
    console.log(`üîç Buscando materiais de apoio do tipo "${type}" para o projeto: ${projectId}`);
    const supportMaterials = await getProjectSupportMaterials(projectId);
    const projectMaterial = supportMaterials[type];

    if (projectMaterial) {
      finalPrompt += `\n\n--- MATERIAL DE APOIO PERSONALIZADO (${type.toUpperCase()}) ---\n${projectMaterial}`;
      console.log(`‚úÖ Material de apoio ${type} adicionado ao prompt (${projectMaterial.length} caracteres)`);
      console.log(`üìã Conte√∫do do material ${type}:`, projectMaterial.substring(0, 150) + '...');
    } else {
      console.log(`‚ö†Ô∏è Nenhum material de apoio ${type} encontrado para o projeto ${projectId}`);
      console.log(`üìä Materiais dispon√≠veis:`, Object.keys(supportMaterials));
    }
  } else {
    console.log(`‚ÑπÔ∏è Sem projectId fornecido, usando apenas prompts padr√£o`);
  }

  // Adicionar conte√∫do dos documentos
  finalPrompt += `\n\n--- CONTE√öDO DOS DOCUMENTOS ---\n${documentContent}`;

  // Adicionar informa√ß√µes adicionais se fornecidas
  if (additionalInfo.trim()) {
    finalPrompt += `\n\n--- INFORMA√á√ïES ADICIONAIS ---\n${additionalInfo}`;
  }

  return finalPrompt;
}

export const validateApiKey = (): boolean => {
  if (!API_KEY) {
    console.error('‚ùå API key do Gemini n√£o configurada');
    console.error('üìù Configure REACT_APP_GEMINI_API_KEY no arquivo .env');
    console.error('üîë Obtenha sua API key em: https://makersuite.google.com/app/apikey');
    return false;
  }

  // Verificar se a API key tem formato v√°lido (chaves do Google AI come√ßam com "AIza")
  const isValidFormat = API_KEY.startsWith('AIza');
  if (!isValidFormat) {
    console.error('‚ùå Formato da API key inv√°lido. As chaves do Google AI come√ßam com "AIza"');
    console.error('üîç Sua chave atual:', API_KEY.substring(0, 10) + '...');
    return false;
  }

  console.log('‚úÖ API key do Gemini configurada corretamente');
  return true;
}

// Fun√ß√£o para testar conex√£o com Gemini
export const testGeminiConnection = async (): Promise<boolean> => {
  console.log('üß™ Testando conex√£o com Gemini...');

  if (!validateApiKey()) {
    return false;
  }

  try {
    if (!genAI) {
      console.error('‚ùå Falha ao inicializar servi√ßo do Gemini');
      return false;
    }

    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });

    // Teste simples com prompt m√≠nimo
    const testPrompt = 'Responda apenas com "OK" se voc√™ recebeu esta mensagem.';
    const result = await model.generateContent(testPrompt);
    const response = await result.response;
    const text = response.text();

    console.log('‚úÖ Conex√£o com Gemini funcionando:', text.trim());
    return true;

  } catch (error: any) {
    console.error('‚ùå Erro na conex√£o com Gemini:', error.message);
    return false;
  }
}

// Fun√ß√£o de debug para verificar materiais de apoio
export const debugSupportMaterials = async (projectId?: string) => {
  console.log('üîç DEBUG: Verificando materiais de apoio...');

  try {
    // Verificar materiais espec√≠ficos do projeto
    if (projectId) {
      console.log(`üìä Verificando materiais para projeto: ${projectId}`);
      const { data: projectMaterials } = await supportMaterials.list(projectId);
      console.log('üìã Materiais espec√≠ficos do projeto:', projectMaterials?.length || 0);
    }

    // Verificar materiais padr√£o/globais
    const { data: defaultMaterials, error } = await supabase
      .from('support_materials')
      .select('*')
      .eq('is_default', true)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Erro ao buscar materiais padr√£o:', error);
      return;
    }

    console.log('üìã Materiais padr√£o encontrados:', defaultMaterials?.length || 0);
    if (defaultMaterials && defaultMaterials.length > 0) {
      defaultMaterials.forEach(material => {
        console.log(`  - ${material.type}: ${material.name} (${material.content.length} chars)`);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhum material padr√£o encontrado! Configure na tela de materiais de apoio.');
    }

  } catch (error) {
    console.error('‚ùå Erro no debug de materiais:', error);
  }
};

// Fun√ß√£o para processar documentos e gerar conte√∫do espec√≠fico
export const generateContent = async (
  type: 'pr' | 'flowchart' | 'tasks',
  documents: DocumentFile[],
  additionalInfo: string,
  projectId?: string
): Promise<any> => {
  try {
    // Valida√ß√£o da API key
    if (!API_KEY) {
      throw new Error('API key do Gemini n√£o configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');
    }

    if (!genAI) {
      throw new Error('Falha ao inicializar o servi√ßo do Gemini. Verifique se a API key √© v√°lida');
    }

    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });

    // Preparar o conte√∫do dos documentos
    let documentContent = '';
    documents.forEach((doc, index) => {
      documentContent += `\n--- DOCUMENTO ${index + 1}: ${doc.name} ---\n`;
      documentContent += doc.content;
      documentContent += '\n';
    });

    const prompt = await generatePrompt(type, documentContent, additionalInfo, projectId);

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    // Processar resposta baseado no tipo
    switch (type) {
      case 'pr':
        // Para PR, retorna o texto diretamente
        return text.trim();

      case 'flowchart':
      case 'tasks':
        // Para flowchart e tasks, tenta extrair JSON
        try {
          let jsonText = '';

          // M√©todo 1: Tentar extrair JSON de blocos de c√≥digo markdown
          const codeBlockMatch = text.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
          if (codeBlockMatch) {
            jsonText = codeBlockMatch[1];
          } else {
            // M√©todo 2: Procurar por JSON v√°lido na resposta
            const jsonMatch = text.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
              jsonText = jsonMatch[0];
            }
          }

          if (jsonText) {
            // Limpar o texto JSON (remover espa√ßos extras, quebras de linha desnecess√°rias)
            jsonText = jsonText.trim();

            // Verificar se √© um JSON v√°lido antes de parsear
            try {
              JSON.parse(jsonText);
              console.log(`‚úÖ JSON ${type} parseado com sucesso`);
              return JSON.parse(jsonText);
            } catch (parseError: any) {
              console.error(`‚ùå JSON ${type} inv√°lido:`, parseError);
              console.error('Texto que falhou:', jsonText);
              throw new Error(`JSON ${type} inv√°lido: ${parseError?.message || 'Erro desconhecido'}`);
            }
          } else {
            console.error('‚ùå Nenhum JSON encontrado na resposta:', text);
            throw new Error('Resposta da IA n√£o cont√©m JSON v√°lido');
          }
        } catch (jsonError: any) {
          console.error('Erro ao processar resposta JSON:', jsonError);
          console.error('Resposta completa da IA:', text);
          throw new Error(`Erro na resposta da IA. Formato JSON inv√°lido: ${jsonError?.message || 'Erro desconhecido'}`);
        }

      default:
        throw new Error(`Tipo de conte√∫do n√£o suportado: ${type}`);
    }
  } catch (error: any) {
    console.error('‚ùå Erro ao gerar conte√∫do:', error);

    // Tratamento espec√≠fico de erros comuns
    if (error.message?.includes('API key')) {
      throw new Error('API key do Gemini n√£o configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');
    }

    if (error.message?.includes('quota') || error.message?.includes('limit')) {
      throw new Error('Limite de uso da API do Gemini excedido. Tente novamente mais tarde');
    }

    if (error.message?.includes('network') || error.message?.includes('fetch')) {
      throw new Error('Erro de conex√£o. Verifique sua internet e tente novamente');
    }

    // Erro gen√©rico com mais detalhes
    throw new Error(`Falha ao gerar conte√∫do: ${error.message || 'Erro desconhecido'}`);
  }
}

// Fun√ß√£o legada para compatibilidade (gera todos os tipos de conte√∫do)
export const processDocuments = async (documents: DocumentFile[], additionalInfo: string, projectId?: string): Promise<ProjectScope> => {
  console.log('üöÄ Iniciando processamento de documentos...');
  console.log('üìÑ Documentos recebidos:', documents.length);
  console.log('üìù Informa√ß√µes adicionais:', additionalInfo ? 'Sim' : 'N√£o');

  try {
    // Verificar API key primeiro
    if (!API_KEY) {
      throw new Error('API key do Gemini n√£o configurada. Configure REACT_APP_GEMINI_API_KEY no arquivo .env');
    }
    console.log('‚úÖ API key configurada');

    let prContent = '';
    let flowchartData: any = { nodes: [], edges: [] };
    let tasksData: any = { epics: [], tasks: [] };

    // Gerar PR
    try {
      console.log('üìã Gerando PR...');
      prContent = await generateContent('pr', documents, additionalInfo, projectId);
      console.log('‚úÖ PR gerado com sucesso:', prContent.length, 'caracteres');
    } catch (error: any) {
      console.error('‚ùå Erro ao gerar PR:', error.message);
      prContent = `Erro ao gerar PR: ${error.message}`;
    }

    // Gerar flowchart
    try {
      console.log('üìä Gerando fluxograma...');
      flowchartData = await generateContent('flowchart', documents, additionalInfo, projectId);
      console.log('‚úÖ Fluxograma gerado:', flowchartData.nodes?.length || 0, 'n√≥s,', flowchartData.edges?.length || 0, 'conex√µes');
    } catch (error: any) {
      console.error('‚ùå Erro ao gerar fluxograma:', error.message);
      flowchartData = { nodes: [], edges: [] };
    }

    // Gerar tasks
    try {
      console.log('üìù Gerando tasks...');
      tasksData = await generateContent('tasks', documents, additionalInfo, projectId);
      console.log('‚úÖ Tasks geradas:', tasksData.tasks?.length || 0, 'tasks,', tasksData.epics?.length || 0, '√©picos');
    } catch (error: any) {
      console.error('‚ùå Erro ao gerar tasks:', error.message);
      tasksData = { epics: [], tasks: [] };
    }

    // Converter tasks para o formato esperado
    const tasks: any[] = [];
    if (tasksData.tasks && Array.isArray(tasksData.tasks)) {
      tasksData.tasks.forEach((task: any, index: number) => {
        tasks.push({
          id: `task-${index + 1}`,
          title: task.title,
          description: task.description,
          storyPoints: task.story_points,
          status: 'pending',
          category: task.category,
          criteria: task.acceptance_criteria || []
        });
      });
    }

    const result = {
      title: documents.length > 0 ? documents[0].name : 'Projeto',
      description: prContent.substring(0, 200) + '...',
      flowchart: flowchartData,
      tasks: tasks
    };

    console.log('üéâ Processamento conclu√≠do com sucesso!');
    return result;

  } catch (error: any) {
    console.error('‚ùå Erro cr√≠tico ao processar documentos:', error);

    // Retornar resultado parcial se poss√≠vel
    const fallbackResult: ProjectScope = {
      title: documents.length > 0 ? documents[0].name : 'Projeto',
      description: 'Erro ao processar documentos: ' + error.message,
      flowchart: { nodes: [], edges: [] },
      tasks: []
    };

    console.log('‚ö†Ô∏è Retornando resultado fallback devido ao erro');
    return fallbackResult;
  }
}

export const extractTextFromFile = async (file: File): Promise<string> => {
  // Implementa√ß√£o b√°sica para extra√ß√£o de texto
  // Em um ambiente real, voc√™ precisaria de bibliotecas espec√≠ficas para cada tipo de arquivo

  if (file.type === 'text/markdown' || file.type === 'text/plain') {
    return await file.text();
  } else if (file.type === 'application/pdf') {
    // Para PDF, voc√™ precisaria de uma biblioteca como pdf-parse
    throw new Error('Processamento de PDF ainda n√£o implementado');
  } else if (file.type.includes('document')) {
    // Para DOCX, voc√™ precisaria de uma biblioteca como mammoth
    throw new Error('Processamento de DOCX ainda n√£o implementado');
  }

  return '';
}
